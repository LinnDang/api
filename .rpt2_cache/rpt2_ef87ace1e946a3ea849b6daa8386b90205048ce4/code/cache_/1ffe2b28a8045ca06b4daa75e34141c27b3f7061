{"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nexport default class SubmittableResult {\r\n    constructor({ events, status }) {\r\n        this.events = events || [];\r\n        this.status = status;\r\n    }\r\n    get isCompleted() {\r\n        return this.isError || this.isFinalized;\r\n    }\r\n    get isError() {\r\n        return this.status.isDropped || this.status.isInvalid || this.status.isUsurped;\r\n    }\r\n    get isFinalized() {\r\n        return this.status.isFinalized;\r\n    }\r\n    /**\r\n     * @description Filters EventRecords for the specified method & section (there could be multiple)\r\n     */\r\n    filterRecords(section, method) {\r\n        return this.events.filter(({ event }) => event.section === section && event.method === method);\r\n    }\r\n    /**\r\n     * @description Finds an EventRecord for the specified method & section\r\n     */\r\n    findRecord(section, method) {\r\n        return this.events.find(({ event }) => event.section === section && event.method === method);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/submittable/types.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api/src/submittable/Result.d.ts","writeByteOrderMark":false,"text":"import { ExtrinsicStatus, EventRecord } from '@polkadot/types/interfaces';\r\nimport { SubmittableResultImpl, SubmittableResultValue } from './types';\r\nexport default class SubmittableResult implements SubmittableResultImpl {\r\n    readonly events: EventRecord[];\r\n    readonly status: ExtrinsicStatus;\r\n    constructor({ events, status }: SubmittableResultValue);\r\n    get isCompleted(): boolean;\r\n    get isError(): boolean;\r\n    get isFinalized(): boolean;\r\n    /**\r\n     * @description Filters EventRecords for the specified method & section (there could be multiple)\r\n     */\r\n    filterRecords(section: string, method: string): EventRecord[];\r\n    /**\r\n     * @description Finds an EventRecord for the specified method & section\r\n     */\r\n    findRecord(section: string, method: string): EventRecord | undefined;\r\n}\r\n"}}
