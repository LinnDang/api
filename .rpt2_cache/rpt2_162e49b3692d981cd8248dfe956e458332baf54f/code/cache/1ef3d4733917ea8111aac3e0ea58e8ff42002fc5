{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { Option, Vec } from '../../codec';\r\nimport StorageHasher from '../../primitive/StorageHasher';\r\nimport MetadataV5 from '../v5';\r\nimport { DoubleMapType, StorageFunctionMetadata, StorageFunctionType } from '../v5/Storage';\r\n/**\r\n * Convert V4 StorageFunction to V5 StorageFunction\r\n */\r\nfunction toV5StorageFunction(storageFn) {\r\n    const { documentation, fallback, modifier, name, type } = storageFn;\r\n    function toStorageHasher(text) {\r\n        switch (text.toString()) {\r\n            case 'blake2_128':\r\n                return new StorageHasher('Blake2_128');\r\n            case 'blake2_256':\r\n                return new StorageHasher('Blake2_256');\r\n            case 'twox_128':\r\n                return new StorageHasher('Twox128');\r\n            case 'twox_256':\r\n                return new StorageHasher('Twox256');\r\n            case 'twox_64_concat':\r\n                return new StorageHasher('Twox64Concat');\r\n            default:\r\n                throw new Error(`Invalid Storage hasher: ${text.toString()}`);\r\n        }\r\n    }\r\n    const [newType, index] = type.isPlainType\r\n        ? [type, 0]\r\n        : type.isMap\r\n            ? [type.asMap, 1]\r\n            : [new DoubleMapType({\r\n                    hasher: type.asDoubleMap.hasher,\r\n                    key1: type.asDoubleMap.key1,\r\n                    key2: type.asDoubleMap.key2,\r\n                    value: type.asDoubleMap.value,\r\n                    key2Hasher: toStorageHasher(type.asDoubleMap.key2Hasher)\r\n                }), 2];\r\n    return new StorageFunctionMetadata({\r\n        name: name,\r\n        modifier: modifier,\r\n        type: new StorageFunctionType(newType, index),\r\n        fallback: fallback,\r\n        documentation: documentation\r\n    });\r\n}\r\n/**\r\n * Convert from MetadataV4 to MetadataV5\r\n * See https://github.com/paritytech/substrate/pull/2836/files for details\r\n */\r\nexport default function toV5(metadataV4) {\r\n    return new MetadataV5({\r\n        // FIXME, this needs typing, not any\r\n        modules: metadataV4.modules.map((modul) => {\r\n            return {\r\n                name: modul.name,\r\n                prefix: modul.prefix,\r\n                storage: modul.storage.isSome\r\n                    ? new Option(Vec.with(StorageFunctionMetadata), modul.storage.unwrap().map(toV5StorageFunction))\r\n                    : undefined,\r\n                calls: modul.calls,\r\n                events: modul.events\r\n            };\r\n        })\r\n    });\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Text.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v4/Metadata.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/StorageHasher.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v5/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v4/Storage.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v5/Storage.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/Metadata/v4/toV5.d.ts","writeByteOrderMark":false,"text":"import MetadataV4 from './Metadata';\r\nimport MetadataV5 from '../v5';\r\n/**\r\n * Convert from MetadataV4 to MetadataV5\r\n * See https://github.com/paritytech/substrate/pull/2836/files for details\r\n */\r\nexport default function toV5(metadataV4: MetadataV4): MetadataV5;\r\n"}}
