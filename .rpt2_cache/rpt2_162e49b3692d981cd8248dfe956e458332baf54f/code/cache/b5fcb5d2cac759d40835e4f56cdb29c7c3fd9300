{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\nimport createType from '../../codec/createType';\r\nimport Struct from '../../codec/Struct';\r\n/**\r\n * @name Block\r\n * @description\r\n * A block encoded with header and extrinsics\r\n */\r\nexport default class Block extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            header: 'Header',\r\n            extrinsics: 'Vec<Extrinsic>'\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description Encodes a content [[Hash]] for the block\r\n     */\r\n    get contentHash() {\r\n        return createType('Hash', blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description The [[Extrinsic]] contained in the block\r\n     */\r\n    get extrinsics() {\r\n        return this.get('extrinsics');\r\n    }\r\n    /**\r\n     * @description Block/header [[Hash]]\r\n     */\r\n    get hash() {\r\n        return this.header.hash;\r\n    }\r\n    /**\r\n     * @description The [[Header]] of the block\r\n     */\r\n    get header() {\r\n        return this.get('header');\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/runtime/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/Extrinsic.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Vec.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/Block.d.ts","writeByteOrderMark":false,"text":"import { Digest, DigestItem, Hash, Header } from '../../interfaces/runtime';\r\nimport { AnyNumber, AnyU8a } from '../../types';\r\nimport Extrinsic from '../Extrinsic/Extrinsic';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\nexport interface HeaderValue {\r\n    digest?: Digest | {\r\n        logs: DigestItem[];\r\n    };\r\n    extrinsicsRoot?: AnyU8a;\r\n    number?: AnyNumber;\r\n    parentHash?: AnyU8a;\r\n    stateRoot?: AnyU8a;\r\n}\r\nexport interface BlockValue {\r\n    extrinsics?: AnyU8a[];\r\n    header?: HeaderValue;\r\n}\r\n/**\r\n * @name Block\r\n * @description\r\n * A block encoded with header and extrinsics\r\n */\r\nexport default class Block extends Struct {\r\n    constructor(value?: BlockValue | Uint8Array);\r\n    /**\r\n     * @description Encodes a content [[Hash]] for the block\r\n     */\r\n    readonly contentHash: Hash;\r\n    /**\r\n     * @description The [[Extrinsic]] contained in the block\r\n     */\r\n    readonly extrinsics: Vec<Extrinsic>;\r\n    /**\r\n     * @description Block/header [[Hash]]\r\n     */\r\n    readonly hash: Hash;\r\n    /**\r\n     * @description The [[Header]] of the block\r\n     */\r\n    readonly header: Header;\r\n}\r\n"}}
