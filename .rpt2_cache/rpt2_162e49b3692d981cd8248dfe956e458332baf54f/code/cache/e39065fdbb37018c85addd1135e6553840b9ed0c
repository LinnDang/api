{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { bnToHex, bnToU8a } from '@polkadot/util';\r\nimport { ClassOf } from './createType';\r\nimport AbstractInt, { DEFAULT_UINT_BITS } from './AbstractInt';\r\n/**\r\n * @name UInt\r\n * @description\r\n * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,\r\n * this handles the encoding and decoding of those numbers. Upon construction\r\n * the bitLength is provided and any additional use keeps the number to this\r\n * length. This extends `BN`, so all methods available on a normal `BN` object\r\n * is available here.\r\n * @noInheritDoc\r\n */\r\nexport default class UInt extends AbstractInt {\r\n    constructor(value = 0, bitLength = DEFAULT_UINT_BITS, isHexJson = false) {\r\n        super(false, value, bitLength, isHexJson);\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(isLe = false) {\r\n        // For display/JSON, this is BE, for compare, use isLe\r\n        return bnToHex(this, {\r\n            bitLength: this._bitLength,\r\n            isLe,\r\n            isNegative: false\r\n        });\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        // NOTE In the case of balances, which have a special meaning on the UI\r\n        // and can be interpreted differently, return a specifc value for it so\r\n        // underlying it always matches (no matter which length it actually is)\r\n        return this instanceof ClassOf('Balance')\r\n            ? 'Balance'\r\n            : `u${this._bitLength}`;\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    toU8a(isBare) {\r\n        return bnToU8a(this, {\r\n            bitLength: this._bitLength,\r\n            isLe: true,\r\n            isNegative: false\r\n        });\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/AbstractInt.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/UInt.d.ts","writeByteOrderMark":false,"text":"import { AnyNumber } from '../types';\r\nimport AbstractInt, { UIntBitLength } from './AbstractInt';\r\n/**\r\n * @name UInt\r\n * @description\r\n * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,\r\n * this handles the encoding and decoding of those numbers. Upon construction\r\n * the bitLength is provided and any additional use keeps the number to this\r\n * length. This extends `BN`, so all methods available on a normal `BN` object\r\n * is available here.\r\n * @noInheritDoc\r\n */\r\nexport default class UInt extends AbstractInt {\r\n    constructor(value?: AnyNumber, bitLength?: UIntBitLength, isHexJson?: boolean);\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(isLe?: boolean): string;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\n"}}
