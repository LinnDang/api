{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isU8a, u8aToHex } from '@polkadot/util';\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\nimport createType from '../codec/createType';\r\n/**\r\n * @name Bool\r\n * @description\r\n * Representation for a boolean value in the system. It extends the base JS `Boolean` class\r\n * @noInheritDoc\r\n */\r\nexport default class Bool extends Boolean {\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    constructor(value = false) {\r\n        super(Bool.decodeBool(value));\r\n    }\r\n    static decodeBool(value) {\r\n        if (value instanceof Boolean) {\r\n            return value.valueOf();\r\n        }\r\n        else if (isU8a(value)) {\r\n            return value[0] === 1;\r\n        }\r\n        return !!value;\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    get hash() {\r\n        return createType('Hash', blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description Checks if the value is an empty value (always false)\r\n     */\r\n    get isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return this.valueOf() === (other instanceof Boolean\r\n            ? other.valueOf()\r\n            : other);\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex() {\r\n        return u8aToHex(this.toU8a());\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.valueOf();\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return 'bool';\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        return `${this.toJSON()}`;\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    toU8a(isBare) {\r\n        return new Uint8Array([this.valueOf() ? 1 : 0]);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Bool.d.ts","writeByteOrderMark":false,"text":"import { Codec, IHash } from '../types';\r\n/**\r\n * @name Bool\r\n * @description\r\n * Representation for a boolean value in the system. It extends the base JS `Boolean` class\r\n * @noInheritDoc\r\n */\r\nexport default class Bool extends Boolean implements Codec {\r\n    constructor(value?: Bool | Boolean | Uint8Array | boolean | number);\r\n    private static decodeBool;\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    readonly hash: IHash;\r\n    /**\r\n     * @description Checks if the value is an empty value (always false)\r\n     */\r\n    readonly isEmpty: boolean;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(): string;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): boolean;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\n"}}
