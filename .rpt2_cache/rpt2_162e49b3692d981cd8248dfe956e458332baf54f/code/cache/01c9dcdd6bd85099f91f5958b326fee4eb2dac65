{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\n/**\r\n * Given an u8a, and an array of Type constructors, decode the u8a against the\r\n * types, and return an array of decoded values.\r\n *\r\n * @param u8a - The u8a to decode.\r\n * @param types - The array of Constructor to decode the U8a against.\r\n */\r\nexport default function decodeU8a(u8a, _types) {\r\n    const types = Array.isArray(_types)\r\n        ? _types\r\n        : Object.values(_types);\r\n    if (!types.length) {\r\n        return [];\r\n    }\r\n    const Type = types[0];\r\n    try {\r\n        const value = new Type(u8a);\r\n        return [value].concat(decodeU8a(u8a.subarray(value.encodedLength), types.slice(1)));\r\n    }\r\n    catch (error) {\r\n        throw new Error(`U8a: failed on '${Type.name}':: ${error.message}`);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/utils/decodeU8a.d.ts","writeByteOrderMark":false,"text":"import { Codec, Constructor } from '../../types';\r\n/**\r\n * Given an u8a, and an array of Type constructors, decode the u8a against the\r\n * types, and return an array of decoded values.\r\n *\r\n * @param u8a - The u8a to decode.\r\n * @param types - The array of Constructor to decode the U8a against.\r\n */\r\nexport default function decodeU8a(u8a: Uint8Array, _types: Constructor[] | {\r\n    [index: string]: Constructor;\r\n}): Codec[];\r\n"}}
