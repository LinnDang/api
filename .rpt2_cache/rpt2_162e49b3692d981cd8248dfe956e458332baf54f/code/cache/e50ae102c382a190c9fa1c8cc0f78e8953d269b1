{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport runtimeTypes from '@polkadot/types/interfaces/runtime/definitions';\r\nimport { Struct } from '@polkadot/types';\r\n// @ts-ignore\r\nconst _Header = Struct.with(runtimeTypes.types.Header);\r\n/**\r\n * @name HeaderExtended\r\n * @description\r\n * A [[Block]] header with an additional `author` field that indicates the block author\r\n */\r\nexport default class HeaderExtended extends _Header {\r\n    constructor(header = null, sessionValidators = []) {\r\n        super(header);\r\n        if (!header || !header.digest || !sessionValidators.length) {\r\n            return;\r\n        }\r\n        const [pitem] = header.digest.logsWith('PreRuntime');\r\n        // extract from the substrate 2.0 PreRuntime digest\r\n        if (pitem) {\r\n            const [engine, data] = pitem.asPreRuntime;\r\n            if (engine.isAbrs || engine.isBabe || engine.isAura) {\r\n                this._author = engine.extractAuthor(data, sessionValidators);\r\n            }\r\n        }\r\n        else {\r\n            const [citem] = header.digest.logsWith('Consensus');\r\n            // extract author from the consensus (substrate 1.0, digest)\r\n            if (citem) {\r\n                const [engine, data] = citem.asConsensus;\r\n                if (engine.isAura) {\r\n                    this._author = engine.extractAuthor(data, sessionValidators);\r\n                }\r\n            }\r\n            else {\r\n                const [sitem] = header.digest.logsWith('SealV0');\r\n                // extract author from the seal (pre substrate 1.0, backwards compat)\r\n                if (sitem) {\r\n                    this._author = sessionValidators[sitem.asSealV0[0].modn(sessionValidators.length)];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @description Convenience method, returns the author for the block\r\n     */\r\n    get author() {\r\n        return this._author;\r\n    }\r\n    /**\r\n     * @description Creates the JSON representation\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            author: this.author\r\n                ? this.author.toJSON()\r\n                : undefined\r\n        };\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/runtime/definitions.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/type/HeaderExtended.d.ts","writeByteOrderMark":false,"text":"import { AccountId, Header } from '@polkadot/types/interfaces';\r\nimport { AnyJsonObject, Constructor } from '@polkadot/types/types';\r\ndeclare const _Header: Constructor<Header>;\r\n/**\r\n * @name HeaderExtended\r\n * @description\r\n * A [[Block]] header with an additional `author` field that indicates the block author\r\n */\r\nexport default class HeaderExtended extends _Header {\r\n    private _author?;\r\n    constructor(header?: Header | null, sessionValidators?: AccountId[]);\r\n    /**\r\n     * @description Convenience method, returns the author for the block\r\n     */\r\n    readonly author: AccountId | undefined;\r\n    /**\r\n     * @description Creates the JSON representation\r\n     */\r\n    toJSON(): AnyJsonObject;\r\n}\r\nexport {};\r\n"}}
