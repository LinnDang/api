{"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport l from './logging';\r\nexport default function filterEvents(extHash, { block: { extrinsics, header } }, allEvents) {\r\n    // extrinsics to hashes\r\n    const myHash = extHash.toHex();\r\n    const allHashes = extrinsics.map((ext) => ext.hash.toHex());\r\n    // find the index of our extrinsic in the block\r\n    const index = allHashes.indexOf(myHash);\r\n    // if we do get the block after finalized, it _should_ be there\r\n    if (index === -1) {\r\n        l.warn(`block ${header.hash}: Unable to find extrinsic ${myHash} inside ${allHashes}`);\r\n        return;\r\n    }\r\n    return allEvents.filter(({ phase }) => \r\n    // only ApplyExtrinsic has the extrinsic index\r\n    phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/util/logging.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api/src/util/filterEvents.d.ts","writeByteOrderMark":false,"text":"import { EventRecord, SignedBlock } from '@polkadot/types/interfaces';\r\nimport { U8a } from '@polkadot/types';\r\nexport default function filterEvents(extHash: U8a, { block: { extrinsics, header } }: SignedBlock, allEvents: EventRecord[]): EventRecord[] | undefined;\r\n"}}
