{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport Option from './Option';\r\nimport Struct from './Struct';\r\nimport Tuple from './Tuple';\r\nimport Vec from './Vec';\r\nconst EMPTY = new Uint8Array();\r\n/**\r\n * @name Linkage\r\n * @description The wrapper for the result from a LinkedMap\r\n */\r\nexport default class Linkage extends Struct {\r\n    constructor(Type, value) {\r\n        super({\r\n            previous: Option.with(Type),\r\n            next: Option.with(Type)\r\n        }, value);\r\n    }\r\n    static withKey(Type) {\r\n        return class extends Linkage {\r\n            constructor(value) {\r\n                super(Type, value);\r\n            }\r\n        };\r\n    }\r\n    get previous() {\r\n        return this.get('previous');\r\n    }\r\n    get next() {\r\n        return this.get('next');\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return `Linkage<${this.next.toRawType(true)}>`;\r\n    }\r\n    /**\r\n     * @description Custom toU8a which with bare mode does not return the linkage if empty\r\n     */\r\n    toU8a(isBare) {\r\n        return isBare && this.isEmpty\r\n            ? EMPTY\r\n            : super.toU8a();\r\n    }\r\n}\r\n/**\r\n * @name LinkageResult\r\n * @description A Linkage keys/Values tuple\r\n */\r\nexport class LinkageResult extends Tuple {\r\n    constructor([TypeKey, keys], [TypeValue, values]) {\r\n        super({\r\n            Keys: Vec.with(TypeKey),\r\n            Values: Vec.with(TypeValue)\r\n        }, [keys, values]);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Option.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Tuple.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Vec.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/Linkage.d.ts","writeByteOrderMark":false,"text":"import { Constructor, Codec, InterfaceTypes } from '../types';\r\nimport Option from './Option';\r\nimport Struct from './Struct';\r\nimport Tuple from './Tuple';\r\ndeclare type TypeWithValues = [Constructor, any[]];\r\n/**\r\n * @name Linkage\r\n * @description The wrapper for the result from a LinkedMap\r\n */\r\nexport default class Linkage<T extends Codec> extends Struct {\r\n    constructor(Type: Constructor | InterfaceTypes, value?: any);\r\n    static withKey<O extends Codec>(Type: Constructor | InterfaceTypes): Constructor<Linkage<O>>;\r\n    readonly previous: Option<T>;\r\n    readonly next: Option<T>;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Custom toU8a which with bare mode does not return the linkage if empty\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\n/**\r\n * @name LinkageResult\r\n * @description A Linkage keys/Values tuple\r\n */\r\nexport declare class LinkageResult extends Tuple {\r\n    constructor([TypeKey, keys]: TypeWithValues, [TypeValue, values]: TypeWithValues);\r\n}\r\nexport {};\r\n"}}
