{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert } from '@polkadot/util';\r\nimport Enum from '../../codec/Enum';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\n/**\r\n * @name DigestItem\r\n * @description\r\n * A [[Enum]] the specifies the specific item in the logs of a [[Digest]]\r\n */\r\nexport class DigestItem extends Enum {\r\n    constructor(value) {\r\n        super({\r\n            Other: 'Bytes',\r\n            AuthoritiesChange: 'Vec<AuthorityId>',\r\n            ChangesTrieRoot: 'Hash',\r\n            SealV0: 'SealV0',\r\n            Consensus: 'Consensus',\r\n            Seal: 'Seal',\r\n            PreRuntime: 'PreRuntime' // 6\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description Returns the item as a [[Vec<AuthorityId>]]\r\n     */\r\n    get asAuthoritiesChange() {\r\n        assert(this.isAuthoritiesChange, `Cannot convert '${this.type}' via asAuthoritiesChange`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the item as a [[ChangesTrieRoot]]\r\n     */\r\n    get asChangesTrieRoot() {\r\n        assert(this.isChangesTrieRoot, `Cannot convert '${this.type}' via asChangesTrieRoot`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @desciption Retuns the item as a [[Consensus]]\r\n     */\r\n    get asConsensus() {\r\n        assert(this.isConsensus, `Cannot convert '${this.type}' via asConsensus`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the item as a [[Bytes]]\r\n     */\r\n    get asOther() {\r\n        assert(this.isOther, `Cannot convert '${this.type}' via asOther`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the item as a [[PreRuntime]]\r\n     */\r\n    get asPreRuntime() {\r\n        assert(this.isPreRuntime, `Cannot convert '${this.type}' via asPreRuntime`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the item as a [[Seal]]\r\n     */\r\n    get asSeal() {\r\n        assert(this.isSeal, `Cannot convert '${this.type}' via asSeal`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the item as a [[SealV0]]\r\n     */\r\n    get asSealV0() {\r\n        assert(this.isSealV0, `Cannot convert '${this.type}' via asSealV0`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns true on [[AuthoritiesChange]]\r\n     */\r\n    get isAuthoritiesChange() {\r\n        return this.type === 'AuthoritiesChange';\r\n    }\r\n    /**\r\n     * @description Returns true on [[ChangesTrieRoot]]\r\n     */\r\n    get isChangesTrieRoot() {\r\n        return this.type === 'ChangesTrieRoot';\r\n    }\r\n    /**\r\n     * @description Returns true on [[Consensus]]\r\n     */\r\n    get isConsensus() {\r\n        return this.type === 'Consensus';\r\n    }\r\n    /**\r\n     * @description Returns true on [[Other]]\r\n     */\r\n    get isOther() {\r\n        return this.type === 'Other';\r\n    }\r\n    /**\r\n     * @description Returns true on [[PreRuntime]]\r\n     */\r\n    get isPreRuntime() {\r\n        return this.type === 'PreRuntime';\r\n    }\r\n    /**\r\n     * @description Returns true on [[Seal]]\r\n     */\r\n    get isSeal() {\r\n        return this.type === 'Seal';\r\n    }\r\n    /**\r\n     * @description Returns true on [[SealV0]]\r\n     */\r\n    get isSealV0() {\r\n        return this.type === 'SealV0';\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers. For logs, we overrides to produce the hex version (sligning with substrate gives in actual JSON responses)\r\n     */\r\n    toJSON() {\r\n        return this.toHex();\r\n    }\r\n    /**\r\n     * @description Returns the type of engine\r\n     */\r\n    get type() {\r\n        return super.type;\r\n    }\r\n}\r\n/**\r\n * @name Digest\r\n * @description\r\n * A [[Header]] Digest\r\n */\r\nexport default class Digest extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            logs: Vec.with(DigestItem)\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description The [[DigestItem]] logs\r\n     */\r\n    get logs() {\r\n        return this.get('logs');\r\n    }\r\n    /**\r\n     * @description The [[DigestItem]] logs, filtered, filter items included. This is useful for derive functionality where only a certain type of log is to be returned.\r\n     */\r\n    logsWith(...include) {\r\n        return this.logs.filter(({ type }) => include.includes(type));\r\n    }\r\n    /**\r\n     * @description The [[DigestItem]] logs, filtered, filter items exluded. This is useful for stripping headers for eg. WASM runtime execution.\r\n     */\r\n    logsWithout(...exclude) {\r\n        return this.logs.filter(({ type }) => !exclude.includes(type));\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/consensus/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/runtime/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Enum.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Vec.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Bytes.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/Digest.d.ts","writeByteOrderMark":false,"text":"import { AuthorityId } from '../../interfaces/consensus';\r\nimport { Consensus, Hash, PreRuntime, Seal, SealV0 } from '../../interfaces/runtime';\r\nimport Enum from '../../codec/Enum';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\nimport Bytes from '../Bytes';\r\n/**\r\n * @name DigestItem\r\n * @description\r\n * A [[Enum]] the specifies the specific item in the logs of a [[Digest]]\r\n */\r\nexport declare class DigestItem extends Enum {\r\n    constructor(value: any);\r\n    /**\r\n     * @description Returns the item as a [[Vec<AuthorityId>]]\r\n     */\r\n    readonly asAuthoritiesChange: Vec<AuthorityId>;\r\n    /**\r\n     * @description Returns the item as a [[ChangesTrieRoot]]\r\n     */\r\n    readonly asChangesTrieRoot: Hash;\r\n    /**\r\n     * @desciption Retuns the item as a [[Consensus]]\r\n     */\r\n    readonly asConsensus: Consensus;\r\n    /**\r\n     * @description Returns the item as a [[Bytes]]\r\n     */\r\n    readonly asOther: Bytes;\r\n    /**\r\n     * @description Returns the item as a [[PreRuntime]]\r\n     */\r\n    readonly asPreRuntime: PreRuntime;\r\n    /**\r\n     * @description Returns the item as a [[Seal]]\r\n     */\r\n    readonly asSeal: Seal;\r\n    /**\r\n     * @description Returns the item as a [[SealV0]]\r\n     */\r\n    readonly asSealV0: SealV0;\r\n    /**\r\n     * @description Returns true on [[AuthoritiesChange]]\r\n     */\r\n    readonly isAuthoritiesChange: boolean;\r\n    /**\r\n     * @description Returns true on [[ChangesTrieRoot]]\r\n     */\r\n    readonly isChangesTrieRoot: boolean;\r\n    /**\r\n     * @description Returns true on [[Consensus]]\r\n     */\r\n    readonly isConsensus: boolean;\r\n    /**\r\n     * @description Returns true on [[Other]]\r\n     */\r\n    readonly isOther: boolean;\r\n    /**\r\n     * @description Returns true on [[PreRuntime]]\r\n     */\r\n    readonly isPreRuntime: boolean;\r\n    /**\r\n     * @description Returns true on [[Seal]]\r\n     */\r\n    readonly isSeal: boolean;\r\n    /**\r\n     * @description Returns true on [[SealV0]]\r\n     */\r\n    readonly isSealV0: boolean;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers. For logs, we overrides to produce the hex version (sligning with substrate gives in actual JSON responses)\r\n     */\r\n    toJSON(): string;\r\n    /**\r\n     * @description Returns the type of engine\r\n     */\r\n    readonly type: string;\r\n}\r\n/**\r\n * @name Digest\r\n * @description\r\n * A [[Header]] Digest\r\n */\r\nexport default class Digest extends Struct {\r\n    constructor(value: any);\r\n    /**\r\n     * @description The [[DigestItem]] logs\r\n     */\r\n    readonly logs: Vec<DigestItem>;\r\n    /**\r\n     * @description The [[DigestItem]] logs, filtered, filter items included. This is useful for derive functionality where only a certain type of log is to be returned.\r\n     */\r\n    logsWith(...include: string[]): Vec<DigestItem>;\r\n    /**\r\n     * @description The [[DigestItem]] logs, filtered, filter items exluded. This is useful for stripping headers for eg. WASM runtime execution.\r\n     */\r\n    logsWithout(...exclude: string[]): Vec<DigestItem>;\r\n}\r\n"}}
