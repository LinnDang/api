{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { switchMap, map } from 'rxjs/operators';\r\nimport { approvalFlagsToBools } from '../util/approvalFlagsToBools';\r\nimport { drr } from '../util/drr';\r\n/**\r\n * @name approvalsOf\r\n * @returns A nested array of boolean approvals for the given account in each voter set index, converted from its ApprovalFlag(s).\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.elections.approvalsOf(ALICE, (approvals) => {\r\n *   // approvals === [[false], [true, false], ...]\r\n * });\r\n * ```\r\n */\r\nexport function approvalsOf(api) {\r\n    return (who) => (api.query.elections.nextVoterSet())\r\n        .pipe(switchMap((nextVoterSet) => api.query.elections.approvalsOf.multi([...Array(nextVoterSet.toNumber() + 1).keys()].map((i) => [\r\n        who.toString(), i\r\n    ]))), map((votes) => votes.map((flags) => approvalFlagsToBools(flags))), drr());\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/approvalFlagsToBools.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/elections/approvalsOf.d.ts","writeByteOrderMark":false,"text":"import { AccountId } from '@polkadot/types/interfaces';\r\nimport { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * @name approvalsOf\r\n * @returns A nested array of boolean approvals for the given account in each voter set index, converted from its ApprovalFlag(s).\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.elections.approvalsOf(ALICE, (approvals) => {\r\n *   // approvals === [[false], [true, false], ...]\r\n * });\r\n * ```\r\n */\r\nexport declare function approvalsOf(api: ApiInterfaceRx): (who: AccountId) => Observable<boolean[][]>;\r\n"}}
