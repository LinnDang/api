{"code":"// Copyright 2017-2019 @polkadot/api-metadata authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { createType } from '@polkadot/types';\r\nimport { assert, stringCamelCase } from '@polkadot/util';\r\n/**\r\n * From the metadata of a function in the module's storage, generate the function\r\n * that will return the an [[CallFunction]].\r\n *\r\n * @param section - Name of the module section.\r\n * @param sectionIndex - Index of the module section in the modules array.\r\n * @param methodIndex - Index of the method inside the section.\r\n * @param callMetadata - Metadata of the call function.\r\n */\r\nexport default function createDescriptor(section, sectionIndex, methodIndex, callMetadata) {\r\n    const callIndex = new Uint8Array([sectionIndex, methodIndex]);\r\n    const expectedArgs = callMetadata.args;\r\n    const funcName = stringCamelCase(callMetadata.name.toString());\r\n    const extrinsicFn = (...args) => {\r\n        assert(expectedArgs.length.valueOf() === args.length, `Extrinsic ${section}.${funcName} expects ${expectedArgs.length.valueOf()} arguments, got ${args.length}.`);\r\n        return createType('Call', {\r\n            args,\r\n            callIndex\r\n        }, callMetadata);\r\n    };\r\n    extrinsicFn.callIndex = callIndex;\r\n    extrinsicFn.meta = callMetadata;\r\n    extrinsicFn.method = funcName;\r\n    extrinsicFn.section = section;\r\n    extrinsicFn.toJSON = () => callMetadata.toJSON();\r\n    return extrinsicFn;\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v7/Calls.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-metadata/src/extrinsics/fromMetadata/createUnchecked.d.ts","writeByteOrderMark":false,"text":"import { CallFunction } from '@polkadot/types/types';\r\nimport { FunctionMetadata } from '@polkadot/types/Metadata/v7/Calls';\r\n/**\r\n * From the metadata of a function in the module's storage, generate the function\r\n * that will return the an [[CallFunction]].\r\n *\r\n * @param section - Name of the module section.\r\n * @param sectionIndex - Index of the module section in the modules array.\r\n * @param methodIndex - Index of the method inside the section.\r\n * @param callMetadata - Metadata of the call function.\r\n */\r\nexport default function createDescriptor(section: string, sectionIndex: number, methodIndex: number, callMetadata: FunctionMetadata): CallFunction;\r\n"}}
