{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { ENUMSET_SIZE } from '@polkadot/types/primitive/Generic/AccountIndex';\r\nimport { createType } from '@polkadot/types';\r\nimport { drr } from '../util/drr';\r\nconst enumsetSize = ENUMSET_SIZE.toNumber();\r\n/**\r\n * @name indexes\r\n * @returns Returns all the indexes on the system.\r\n * @description This is an unwieldly query since it loops through\r\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\r\n * on the number of active accounts in the system\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.accounts.indexes((indexes) => {\r\n *   console.log('All existing AccountIndexes', indexes);\r\n * });\r\n * ```\r\n */\r\nexport function indexes(api) {\r\n    return () => {\r\n        return (api.query.indices.nextEnumSet())\r\n            .pipe(\r\n        // use the nextEnumSet (which is a counter of the number of sets) to construct\r\n        // a range of values to query [0, 1, 2, ...]. Retrieve the full enum set for the\r\n        // specific index - each query can return up to ENUMSET_SIZE (64) records, each\r\n        // containing an AccountId\r\n        switchMap((next) => api.query.indices.enumSet.multi([...Array(next.toNumber() + 1).keys()])), map((all) => (all || []).reduce((result, list, outerIndex) => {\r\n            (list || []).forEach((accountId, innerIndex) => {\r\n                // re-create the index based on position 0 is [0][0] and likewise\r\n                // 64 (0..63 in first) is [1][0] (the first index value in set 2)\r\n                const index = (outerIndex * enumsetSize) + innerIndex;\r\n                result[accountId.toString()] = createType('AccountIndex', index);\r\n            });\r\n            return result;\r\n        }, {})), drr());\r\n    };\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Generic/AccountIndex.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/accounts/indexes.d.ts","writeByteOrderMark":false,"text":"import { AccountIndex } from '@polkadot/types/interfaces';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiInterfaceRx } from '@polkadot/api/types';\r\nexport declare type AccountIndexes = Record<string, AccountIndex>;\r\n/**\r\n * @name indexes\r\n * @returns Returns all the indexes on the system.\r\n * @description This is an unwieldly query since it loops through\r\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\r\n * on the number of active accounts in the system\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.accounts.indexes((indexes) => {\r\n *   console.log('All existing AccountIndexes', indexes);\r\n * });\r\n * ```\r\n */\r\nexport declare function indexes(api: ApiInterfaceRx): () => Observable<AccountIndexes>;\r\n"}}
