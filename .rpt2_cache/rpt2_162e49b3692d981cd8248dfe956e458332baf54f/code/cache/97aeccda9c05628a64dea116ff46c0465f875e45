{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport BN from 'bn.js';\r\nimport { bnToBn, compactAddLength, compactFromU8a, compactStripLength, compactToU8a, hexToBn, isBn, isHex, isNumber, isString } from '@polkadot/util';\r\nimport { DEFAULT_BITLENGTH } from '@polkadot/util/compact/defaults';\r\nimport { typeToConstructor } from './utils';\r\nimport Base from './Base';\r\n/**\r\n * @name Compact\r\n * @description\r\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\r\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\r\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\r\n * a number and making the compact representation thereof\r\n */\r\nexport default class Compact extends Base {\r\n    constructor(Type, value = 0) {\r\n        super(Compact.decodeCompact(typeToConstructor(Type), value));\r\n    }\r\n    static with(Type) {\r\n        return class extends Compact {\r\n            constructor(value) {\r\n                super(Type, value);\r\n            }\r\n        };\r\n    }\r\n    static stripLengthPrefix(u8a, bitLength = DEFAULT_BITLENGTH) {\r\n        const [, value] = compactStripLength(u8a, bitLength);\r\n        return value;\r\n    }\r\n    static decodeCompact(Type, value) {\r\n        if (value instanceof Compact) {\r\n            return new Type(value.raw);\r\n        }\r\n        else if (isString(value)) {\r\n            return new Type(isHex(value, -1, true)\r\n                ? hexToBn(value)\r\n                : new BN(value, 10));\r\n        }\r\n        else if (isNumber(value) || isBn(value)) {\r\n            return new Type(bnToBn(value));\r\n        }\r\n        const [, _value] = Compact.decodeU8a(value, new Type(0).bitLength());\r\n        return new Type(_value);\r\n    }\r\n    /**\r\n     * @description Returns the number of bits in the value\r\n     */\r\n    bitLength() {\r\n        return this.raw.bitLength();\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return this.raw.eq(other instanceof Compact\r\n            ? other.raw\r\n            : other);\r\n    }\r\n    /**\r\n     * @description Returns the BN representation of the number\r\n     */\r\n    toBn() {\r\n        return this.raw.toBn();\r\n    }\r\n    /**\r\n     * @description Returns the number representation for the value\r\n     */\r\n    toNumber() {\r\n        return this.raw.toNumber();\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return `Compact<${this.raw.toRawType()}>`;\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    toU8a(isBare) {\r\n        return Compact.encodeU8a(this.raw.toBn());\r\n    }\r\n    /**\r\n     * @description Returns the embedded [[UInt]] or [[Moment]] value\r\n     */\r\n    unwrap() {\r\n        return this.raw;\r\n    }\r\n}\r\n/**\r\n * Prepend a Uint8Array with its compact length.\r\n *\r\n * @param u8a - The Uint8Array to be prefixed\r\n */\r\nCompact.addLengthPrefix = compactAddLength;\r\nCompact.decodeU8a = compactFromU8a;\r\nCompact.encodeU8a = compactToU8a;\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/compact/defaults.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/utils/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/AbstractInt.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Base.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/Compact.d.ts","writeByteOrderMark":false,"text":"import { AnyNumber, Codec, Constructor, InterfaceTypes } from '../types';\r\nimport BN from 'bn.js';\r\nimport { compactAddLength, compactFromU8a, compactToU8a } from '@polkadot/util';\r\nimport { UIntBitLength } from './AbstractInt';\r\nimport Base from './Base';\r\nexport interface CompactEncodable extends Codec {\r\n    bitLength(): UIntBitLength;\r\n    toBn(): BN;\r\n    toNumber(): number;\r\n}\r\n/**\r\n * @name Compact\r\n * @description\r\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\r\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\r\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\r\n * a number and making the compact representation thereof\r\n */\r\nexport default class Compact<T extends CompactEncodable> extends Base<T> {\r\n    constructor(Type: Constructor<T> | InterfaceTypes, value?: Compact<T> | AnyNumber);\r\n    static with<T extends CompactEncodable>(Type: Constructor<T> | InterfaceTypes): Constructor<Compact<T>>;\r\n    /**\r\n     * Prepend a Uint8Array with its compact length.\r\n     *\r\n     * @param u8a - The Uint8Array to be prefixed\r\n     */\r\n    static addLengthPrefix: typeof compactAddLength;\r\n    static decodeU8a: typeof compactFromU8a;\r\n    static encodeU8a: typeof compactToU8a;\r\n    static stripLengthPrefix(u8a: Uint8Array, bitLength?: UIntBitLength): Uint8Array;\r\n    static decodeCompact<T extends CompactEncodable>(Type: Constructor<T>, value: Compact<T> | AnyNumber): CompactEncodable;\r\n    /**\r\n     * @description Returns the number of bits in the value\r\n     */\r\n    bitLength(): UIntBitLength;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Returns the BN representation of the number\r\n     */\r\n    toBn(): BN;\r\n    /**\r\n     * @description Returns the number representation for the value\r\n     */\r\n    toNumber(): number;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n    /**\r\n     * @description Returns the embedded [[UInt]] or [[Moment]] value\r\n     */\r\n    unwrap(): T;\r\n}\r\n"}}
