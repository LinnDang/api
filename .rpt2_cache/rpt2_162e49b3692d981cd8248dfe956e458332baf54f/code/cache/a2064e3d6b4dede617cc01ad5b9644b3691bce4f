{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isU8a, u8aConcat, isHex, hexToU8a } from '@polkadot/util';\r\nimport { decodeU8a, mapToTypeMap, typeToConstructor } from './utils';\r\nimport AbstractArray from './AbstractArray';\r\n/**\r\n * @name Tuple\r\n * @description\r\n * A Tuple defines an anonymous fixed-length array, where each element has its\r\n * own type. It extends the base JS `Array` object.\r\n */\r\nexport default class Tuple extends AbstractArray {\r\n    constructor(Types, value) {\r\n        const Clazzes = Array.isArray(Types)\r\n            ? Types.map((type) => typeToConstructor(type))\r\n            : mapToTypeMap(Types);\r\n        super(...Tuple.decodeTuple(Clazzes, value));\r\n        this._Types = Clazzes;\r\n    }\r\n    static decodeTuple(_Types, value) {\r\n        if (isU8a(value)) {\r\n            return decodeU8a(value, _Types);\r\n        }\r\n        else if (isHex(value)) {\r\n            return Tuple.decodeTuple(_Types, hexToU8a(value));\r\n        }\r\n        const Types = Array.isArray(_Types)\r\n            ? _Types\r\n            : Object.values(_Types);\r\n        return Types.map((Type, index) => {\r\n            try {\r\n                return new Type(value && value[index]);\r\n            }\r\n            catch (error) {\r\n                throw new Error(`Tuple: failed on ${index}:: ${error.message}`);\r\n            }\r\n        });\r\n    }\r\n    static with(Types) {\r\n        return class extends Tuple {\r\n            constructor(value) {\r\n                super(Types, value);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return this.reduce((length, entry) => {\r\n            length += entry.encodedLength;\r\n            return length;\r\n        }, 0);\r\n    }\r\n    /**\r\n     * @description The types definition of the tuple\r\n     */\r\n    get Types() {\r\n        return Array.isArray(this._Types)\r\n            ? this._Types.map(({ name }) => name)\r\n            : Object.keys(this._Types);\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        const types = (Array.isArray(this._Types)\r\n            ? this._Types\r\n            : Object.values(this._Types)).map((Type) => new Type().toRawType());\r\n        return `(${types.join(',')})`;\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        // Overwrite the default toString representation of Array.\r\n        return JSON.stringify(this.toJSON());\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare) {\r\n        return u8aConcat(...this.map((entry) => entry.toU8a(isBare)));\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/utils/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/AbstractArray.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/Tuple.d.ts","writeByteOrderMark":false,"text":"import { Codec, Constructor, InterfaceTypes } from '../types';\r\nimport AbstractArray from './AbstractArray';\r\ndeclare type TupleTypes = (Constructor | InterfaceTypes)[] | {\r\n    [index: string]: Constructor | InterfaceTypes;\r\n};\r\n/**\r\n * @name Tuple\r\n * @description\r\n * A Tuple defines an anonymous fixed-length array, where each element has its\r\n * own type. It extends the base JS `Array` object.\r\n */\r\nexport default class Tuple extends AbstractArray<Codec> {\r\n    private _Types;\r\n    constructor(Types: TupleTypes, value?: any);\r\n    private static decodeTuple;\r\n    static with(Types: TupleTypes): Constructor<Tuple>;\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description The types definition of the tuple\r\n     */\r\n    readonly Types: string[];\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\nexport {};\r\n"}}
