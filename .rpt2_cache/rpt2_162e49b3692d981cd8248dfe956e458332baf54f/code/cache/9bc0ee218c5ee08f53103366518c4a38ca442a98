{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport BN from 'bn.js';\r\nimport { bnToBn, isBn, isNumber, isU8a, isHex } from '@polkadot/util';\r\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\r\nimport createType from '../../codec/createType';\r\nimport U32 from '../U32';\r\nexport const ENUMSET_SIZE = new BN(64);\r\nconst PREFIX_1BYTE = 0xef;\r\nconst PREFIX_2BYTE = 0xfc;\r\nconst PREFIX_4BYTE = 0xfd;\r\nconst PREFIX_8BYTE = 0xfe;\r\nconst MAX_1BYTE = new BN(PREFIX_1BYTE);\r\nconst MAX_2BYTE = new BN(1).shln(16);\r\nconst MAX_4BYTE = new BN(1).shln(32);\r\n/**\r\n * @name AccountIndex\r\n * @description\r\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\r\n * for an Account. We extends from [[U32]] to provide the number-like properties.\r\n */\r\nexport default class AccountIndex extends U32 {\r\n    constructor(value = new BN(0)) {\r\n        super(AccountIndex.decodeAccountIndex(value));\r\n    }\r\n    static decodeAccountIndex(value) {\r\n        if (value instanceof AccountIndex) {\r\n            // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\r\n            // AccountIndex), which has the initial `toString()` implementation.\r\n            return value.toBn();\r\n        }\r\n        else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value)) {\r\n            return value;\r\n        }\r\n        return AccountIndex.decodeAccountIndex(decodeAddress(value));\r\n    }\r\n    static calcLength(_value) {\r\n        const value = bnToBn(_value);\r\n        if (value.lte(MAX_1BYTE)) {\r\n            return 1;\r\n        }\r\n        else if (value.lt(MAX_2BYTE)) {\r\n            return 2;\r\n        }\r\n        else if (value.lt(MAX_4BYTE)) {\r\n            return 4;\r\n        }\r\n        return 8;\r\n    }\r\n    static readLength(input) {\r\n        const first = input[0];\r\n        if (first === PREFIX_2BYTE) {\r\n            return [1, 2];\r\n        }\r\n        else if (first === PREFIX_4BYTE) {\r\n            return [1, 4];\r\n        }\r\n        else if (first === PREFIX_8BYTE) {\r\n            return [1, 8];\r\n        }\r\n        return [0, 1];\r\n    }\r\n    static writeLength(input) {\r\n        switch (input.length) {\r\n            case 2: return new Uint8Array([PREFIX_2BYTE]);\r\n            case 4: return new Uint8Array([PREFIX_4BYTE]);\r\n            case 8: return new Uint8Array([PREFIX_8BYTE]);\r\n            default: return new Uint8Array([]);\r\n        }\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        // shortcut for BN or Number, don't create an object\r\n        if (isBn(other) || isNumber(other)) {\r\n            return super.eq(other);\r\n        }\r\n        // convert and compare\r\n        return super.eq(createType('AccountIndex', other));\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        const length = AccountIndex.calcLength(this);\r\n        return encodeAddress(this.toU8a().subarray(0, length));\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return 'AccountIndex';\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/U32.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/AccountIndex.d.ts","writeByteOrderMark":false,"text":"import { AnyNumber } from '../../types';\r\nimport BN from 'bn.js';\r\nimport U32 from '../U32';\r\nexport declare const ENUMSET_SIZE: BN;\r\n/**\r\n * @name AccountIndex\r\n * @description\r\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\r\n * for an Account. We extends from [[U32]] to provide the number-like properties.\r\n */\r\nexport default class AccountIndex extends U32 {\r\n    constructor(value?: AnyNumber);\r\n    static decodeAccountIndex(value: AnyNumber): BN | Uint8Array | number | string;\r\n    static calcLength(_value: BN | number): number;\r\n    static readLength(input: Uint8Array): [number, number];\r\n    static writeLength(input: Uint8Array): Uint8Array;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n}\r\n"}}
