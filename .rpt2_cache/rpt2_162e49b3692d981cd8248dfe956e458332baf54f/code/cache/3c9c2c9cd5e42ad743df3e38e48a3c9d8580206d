{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { Option, Vec } from '../../codec';\r\nimport StorageHasher from '../../primitive/StorageHasher';\r\nimport MetadataV4 from '../v4';\r\nimport { DoubleMapType, MapType, StorageFunctionMetadata, StorageFunctionType } from '../v4/Storage';\r\n/**\r\n * Convert V3 StorageFunction to V4 StorageFunction\r\n */\r\nfunction toV4StorageFunction(storageFn) {\r\n    const { documentation, fallback, modifier, name, type } = storageFn;\r\n    // Convert the old type to the new type: there is one new field\r\n    // called `hasher`, which we initialize to xxHash (the default in\r\n    // v3).\r\n    const [newType, index] = type.isPlainType\r\n        ? [type, 0]\r\n        : type.isMap\r\n            ? [new MapType({\r\n                    hasher: new StorageHasher('Twox128'),\r\n                    key: type.asMap.key,\r\n                    value: type.asMap.value,\r\n                    isLinked: type.asMap.isLinked\r\n                }), 1]\r\n            : [new DoubleMapType({\r\n                    hasher: new StorageHasher('Twox128'),\r\n                    key1: type.asDoubleMap.key1,\r\n                    key2: type.asDoubleMap.key2,\r\n                    value: type.asDoubleMap.value,\r\n                    key2Hasher: type.asDoubleMap.key2Hasher\r\n                }), 2];\r\n    return new StorageFunctionMetadata({\r\n        name: name,\r\n        modifier: modifier,\r\n        type: new StorageFunctionType(newType, index),\r\n        fallback: fallback,\r\n        documentation: documentation\r\n    });\r\n}\r\n/**\r\n * Convert from MetadataV3 to MetadataV4\r\n * See https://github.com/paritytech/substrate/pull/2268 for details\r\n */\r\nexport default function toV4(metadataV3) {\r\n    return new MetadataV4({\r\n        // FIXME, this needs typing, not any\r\n        modules: metadataV3.modules.map((modul) => {\r\n            return {\r\n                name: modul.name,\r\n                prefix: modul.prefix,\r\n                storage: modul.storage.isSome\r\n                    ? new Option(Vec.with(StorageFunctionMetadata), modul.storage.unwrap().map(toV4StorageFunction))\r\n                    : undefined,\r\n                calls: modul.calls,\r\n                events: modul.events\r\n            };\r\n        })\r\n    });\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v3/Metadata.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/StorageHasher.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v4/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v3/Storage.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v4/Storage.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/Metadata/v3/toV4.d.ts","writeByteOrderMark":false,"text":"import MetadataV3 from './Metadata';\r\nimport MetadataV4 from '../v4';\r\n/**\r\n * Convert from MetadataV3 to MetadataV4\r\n * See https://github.com/paritytech/substrate/pull/2268 for details\r\n */\r\nexport default function toV4(metadataV3: MetadataV3): MetadataV4;\r\n"}}
