{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { hexToU8a, isHex, isU8a } from '@polkadot/util';\r\nimport Compact from '../../codec/Compact';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\nimport { flattenUniq, validateTypes } from '../util';\r\nimport { OuterDispatchMetadata } from './Calls';\r\nimport { OuterEventMetadata } from './Events';\r\nimport { RuntimeModuleMetadata } from './Modules';\r\n// Decodes the runtime metadata as passed through from the `state_getMetadata` call.\r\n/**\r\n * @name MetadataV0\r\n * @description\r\n * The runtime metadata as a decoded structure\r\n */\r\nexport default class MetadataV0 extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            outerEvent: OuterEventMetadata,\r\n            modules: Vec.with(RuntimeModuleMetadata),\r\n            outerDispatch: OuterDispatchMetadata\r\n        }, MetadataV0.decodeMetadata(value));\r\n    }\r\n    static decodeMetadata(value) {\r\n        if (isHex(value)) {\r\n            // We receive this as an hex in the JSON output from the Node.\r\n            // Convert to u8a and use the U8a version to do the actual parsing.\r\n            return MetadataV0.decodeMetadata(hexToU8a(value));\r\n        }\r\n        else if (isU8a(value)) {\r\n            // HACK 13 Oct 2018 - For current running BBQ nodes, Metadata is not properly\r\n            // encoded, it does not have a length prefix. For latest substrate master, it\r\n            // is properly encoded. Here we pull the prefix, check it agianst the length -\r\n            // if matches, then we have the length, otherwise we assume it is an older node\r\n            // and use the whole buffer\r\n            const [offset, length] = Compact.decodeU8a(value);\r\n            return value.length === (offset + length.toNumber())\r\n                ? value.subarray(offset)\r\n                : value;\r\n        }\r\n        // Decode as normal struct\r\n        return value;\r\n    }\r\n    /**\r\n     * @description Wrapped [[OuterDispatchCall]]\r\n     */\r\n    get calls() {\r\n        return this.get('outerDispatch').calls;\r\n    }\r\n    /**\r\n     * @description Wrapped [[OuterEventEventMetadata]]\r\n     */\r\n    get events() {\r\n        return this.get('outerEvent').events;\r\n    }\r\n    /**\r\n     * @description Wrapped [[RuntimeModuleMetadata]]\r\n     */\r\n    get modules() {\r\n        return this.get('modules');\r\n    }\r\n    get argNames() {\r\n        return this.modules.map((modul) => modul.module.call.functions.map((fn) => fn.args.map((argument) => argument.type.toString())));\r\n    }\r\n    get eventNames() {\r\n        return this.events.map((modul) => modul.events.map((event) => event.args.map((argument) => argument.toString())));\r\n    }\r\n    get storageNames() {\r\n        return this.modules.map((modul) => modul.storage.isSome\r\n            ? modul.storage.unwrap().functions.map((fn) => fn.type.isMap\r\n                ? [fn.type.asMap.key.toString(), fn.type.asMap.value.toString()]\r\n                : [fn.type.asType.toString()])\r\n            : []);\r\n    }\r\n    /**\r\n     * @description Helper to retrieve a list of all type that are found, sorted and de-deuplicated\r\n     */\r\n    getUniqTypes(throwError) {\r\n        const types = flattenUniq([this.argNames, this.eventNames, this.storageNames]);\r\n        validateTypes(types, throwError);\r\n        return types;\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Compact.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Vec.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/util/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v0/Calls.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v0/Events.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v0/Modules.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/Metadata/v0/Metadata.d.ts","writeByteOrderMark":false,"text":"import { MetadataInterface } from '../types';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\nimport { OuterDispatchCall } from './Calls';\r\nimport { OuterEventEventMetadata } from './Events';\r\nimport { RuntimeModuleMetadata } from './Modules';\r\n/**\r\n * @name MetadataV0\r\n * @description\r\n * The runtime metadata as a decoded structure\r\n */\r\nexport default class MetadataV0 extends Struct implements MetadataInterface<RuntimeModuleMetadata> {\r\n    constructor(value?: any);\r\n    static decodeMetadata(value: string | Uint8Array | object): object | Uint8Array;\r\n    /**\r\n     * @description Wrapped [[OuterDispatchCall]]\r\n     */\r\n    readonly calls: Vec<OuterDispatchCall>;\r\n    /**\r\n     * @description Wrapped [[OuterEventEventMetadata]]\r\n     */\r\n    readonly events: Vec<OuterEventEventMetadata>;\r\n    /**\r\n     * @description Wrapped [[RuntimeModuleMetadata]]\r\n     */\r\n    readonly modules: Vec<RuntimeModuleMetadata>;\r\n    private readonly argNames;\r\n    private readonly eventNames;\r\n    private readonly storageNames;\r\n    /**\r\n     * @description Helper to retrieve a list of all type that are found, sorted and de-deuplicated\r\n     */\r\n    getUniqTypes(throwError: boolean): string[];\r\n}\r\n"}}
