{"code":"// Copyright 2017-2019 @polkadot/jsonrpc authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport createMethod from './create/method';\r\nimport createParam from './create/param';\r\n// NOTE Order here is the same as in the Rust code\r\nconst call = {\r\n    description: 'Perform a call to a builtin on the chain',\r\n    params: [\r\n        createParam('method', 'Text'),\r\n        createParam('data', 'Bytes'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'Bytes'\r\n};\r\nconst getKeys = {\r\n    description: 'Retrieves the keys with a certain prefix',\r\n    params: [\r\n        createParam('prefix', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    // @ts-ignore The Vec<> wrap is fine\r\n    type: 'Vec<StorageKey>'\r\n};\r\nconst getStorage = {\r\n    description: 'Retrieves the storage for a key',\r\n    params: [\r\n        createParam('key', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'StorageData'\r\n};\r\nconst getStorageHash = {\r\n    description: 'Retrieves the storage hash',\r\n    params: [\r\n        createParam('key', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    // @ts-ignore srml types\r\n    type: 'Hash'\r\n};\r\nconst getStorageSize = {\r\n    description: 'Retrieves the storage size',\r\n    params: [\r\n        createParam('key', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'u64'\r\n};\r\nconst getChildKeys = {\r\n    description: 'Retrieves the keys with prefix of a specific child storage',\r\n    params: [\r\n        createParam('childStorageKey', 'StorageKey'),\r\n        createParam('prefix', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    // @ts-ignore The Vec<> wrap is fine\r\n    type: 'Vec<StorageKey>'\r\n};\r\nconst getChildStorage = {\r\n    description: 'Retrieves the child storage for a key',\r\n    params: [\r\n        createParam('childStorageKey', 'StorageKey'),\r\n        createParam('key', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'StorageData'\r\n};\r\nconst getChildStorageHash = {\r\n    description: 'Retrieves the child storage hash',\r\n    params: [\r\n        createParam('childStorageKey', 'StorageKey'),\r\n        createParam('key', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    // @ts-ignore srml types\r\n    type: 'Hash'\r\n};\r\nconst getChildStorageSize = {\r\n    description: 'Retrieves the child storage size',\r\n    params: [\r\n        createParam('childStorageKey', 'StorageKey'),\r\n        createParam('key', 'StorageKey'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'u64'\r\n};\r\nconst getMetadata = {\r\n    description: 'Returns the runtime metadata',\r\n    params: [\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'Metadata'\r\n};\r\nconst getRuntimeVersion = {\r\n    description: 'Get the runtime version',\r\n    params: [\r\n        // @ts-ignore srml types\r\n        createParam('hash', 'Hash', { isOptional: true })\r\n    ],\r\n    type: 'RuntimeVersion'\r\n};\r\nconst queryStorage = {\r\n    description: 'Query historical storage entries (by key) starting from a start block',\r\n    params: [\r\n        // @ts-ignore The Vec<> wrap is fine\r\n        createParam('keys', 'Vec<StorageKey>'),\r\n        // @ts-ignore srml types\r\n        createParam('startBlock', 'Hash'),\r\n        // @ts-ignore srml types\r\n        createParam('block', 'Hash', { isOptional: true })\r\n    ],\r\n    // @ts-ignore The Vec<> wrap is fine\r\n    type: 'Vec<StorageChangeSet>'\r\n};\r\nconst subscribeStorage = {\r\n    description: 'Subscribes to storage changes for the provided keys',\r\n    params: [\r\n        // @ts-ignore The Vec<> wrap is fine\r\n        createParam('keys', 'Vec<StorageKey>')\r\n    ],\r\n    pubsub: [\r\n        'storage',\r\n        'subscribeStorage',\r\n        'unsubscribeStorage'\r\n    ],\r\n    type: 'StorageChangeSet'\r\n};\r\nconst section = 'state';\r\n/**\r\n * @summary Query the state and state storage.\r\n */\r\nexport default {\r\n    isDeprecated: false,\r\n    isHidden: false,\r\n    description: 'Query of state',\r\n    section,\r\n    methods: {\r\n        call: createMethod(section, 'call', call),\r\n        getChildKeys: createMethod(section, 'getChildKeys', getChildKeys),\r\n        getChildStorage: createMethod(section, 'getChildStorage', getChildStorage),\r\n        getChildStorageHash: createMethod(section, 'getChildStorageHash', getChildStorageHash),\r\n        getChildStorageSize: createMethod(section, 'getChildStorageSize', getChildStorageSize),\r\n        getKeys: createMethod(section, 'getKeys', getKeys),\r\n        getMetadata: createMethod(section, 'getMetadata', getMetadata),\r\n        getRuntimeVersion: createMethod(section, 'getRuntimeVersion', getRuntimeVersion),\r\n        getStorage: createMethod(section, 'getStorage', getStorage),\r\n        getStorageHash: createMethod(section, 'getStorageHash', getStorageHash),\r\n        getStorageSize: createMethod(section, 'getStorageSize', getStorageSize),\r\n        queryStorage: createMethod(section, 'queryStorage', queryStorage),\r\n        subscribeStorage: createMethod(section, 'subscribeStorage', subscribeStorage)\r\n    }\r\n};\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/type-jsonrpc/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/type-jsonrpc/src/create/method.ts","/Users/jacogreeff/Projects/polkadot/api/packages/type-jsonrpc/src/create/param.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/type-jsonrpc/src/state.d.ts","writeByteOrderMark":false,"text":"declare const _default: {\r\n    isDeprecated: boolean;\r\n    isHidden: boolean;\r\n    description: string;\r\n    section: string;\r\n    methods: {\r\n        call: import(\"./types\").RpcMethod;\r\n        getChildKeys: import(\"./types\").RpcMethod;\r\n        getChildStorage: import(\"./types\").RpcMethod;\r\n        getChildStorageHash: import(\"./types\").RpcMethod;\r\n        getChildStorageSize: import(\"./types\").RpcMethod;\r\n        getKeys: import(\"./types\").RpcMethod;\r\n        getMetadata: import(\"./types\").RpcMethod;\r\n        getRuntimeVersion: import(\"./types\").RpcMethod;\r\n        getStorage: import(\"./types\").RpcMethod;\r\n        getStorageHash: import(\"./types\").RpcMethod;\r\n        getStorageSize: import(\"./types\").RpcMethod;\r\n        queryStorage: import(\"./types\").RpcMethod;\r\n        subscribeStorage: import(\"./types\").RpcMethod;\r\n    };\r\n};\r\n/**\r\n * @summary Query the state and state storage.\r\n */\r\nexport default _default;\r\n"}}
