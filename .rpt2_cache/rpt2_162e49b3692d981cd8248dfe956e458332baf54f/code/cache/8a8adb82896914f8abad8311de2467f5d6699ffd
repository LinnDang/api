{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert, isUndefined, stringCamelCase, u8aToHex } from '@polkadot/util';\r\nimport { getTypeClass, getTypeDef } from '../../codec/createType';\r\nimport Struct from '../../codec/Struct';\r\nimport Tuple from '../../codec/Tuple';\r\nimport Null from '../Null';\r\nconst EventTypes = {};\r\n/**\r\n * @name EventData\r\n * @description\r\n * Wrapper for the actual data that forms part of an [[Event]]\r\n */\r\nexport class EventData extends Tuple {\r\n    constructor(Types, value, typeDef, meta, section, method) {\r\n        super(Types, value);\r\n        this._meta = meta;\r\n        this._method = method;\r\n        this._section = section;\r\n        this._typeDef = typeDef;\r\n    }\r\n    /**\r\n     * @description The wrapped [[EventMetadata]]\r\n     */\r\n    get meta() {\r\n        return this._meta;\r\n    }\r\n    /**\r\n     * @description The method as a string\r\n     */\r\n    get method() {\r\n        return this._method;\r\n    }\r\n    /**\r\n     * @description The section as a string\r\n     */\r\n    get section() {\r\n        return this._section;\r\n    }\r\n    /**\r\n     * @description The [[TypeDef]] for this event\r\n     */\r\n    get typeDef() {\r\n        return this._typeDef;\r\n    }\r\n}\r\n/**\r\n * @name Event\r\n * @description\r\n * A representation of a system event. These are generated via the [[Metadata]] interfaces and\r\n * specific to a specific Substrate runtime\r\n */\r\nexport default class Event extends Struct {\r\n    // Currently we _only_ decode from Uint8Array, since we expect it to\r\n    // be used via EventRecord\r\n    constructor(_value) {\r\n        const { DataType, value } = Event.decodeEvent(_value);\r\n        super({\r\n            index: 'EventId',\r\n            data: DataType\r\n        }, value);\r\n    }\r\n    static decodeEvent(value = new Uint8Array()) {\r\n        if (!value.length) {\r\n            return {\r\n                DataType: Null\r\n            };\r\n        }\r\n        const index = value.subarray(0, 2);\r\n        const DataType = EventTypes[index.toString()];\r\n        assert(!isUndefined(DataType), `Unable to decode ${u8aToHex(index)}`);\r\n        return {\r\n            DataType,\r\n            value: {\r\n                index,\r\n                data: value.subarray(2)\r\n            }\r\n        };\r\n    }\r\n    // This is called/injected by the API on init, allowing a snapshot of\r\n    // the available system events to be used in lookups\r\n    static injectMetadata(metadata) {\r\n        metadata.asV7.modules\r\n            .filter((section) => section.events.isSome)\r\n            .forEach((section, sectionIndex) => {\r\n            const sectionName = stringCamelCase(section.name.toString());\r\n            section.events.unwrap().forEach((meta, methodIndex) => {\r\n                const methodName = meta.name.toString();\r\n                const eventIndex = new Uint8Array([sectionIndex, methodIndex]);\r\n                const typeDef = meta.args.map((arg) => getTypeDef(arg.toString()));\r\n                const Types = typeDef.map((typeDef) => getTypeClass(typeDef));\r\n                EventTypes[eventIndex.toString()] = class extends EventData {\r\n                    constructor(value) {\r\n                        super(Types, value, typeDef, meta, sectionName, methodName);\r\n                    }\r\n                };\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @description The wrapped [[EventData]]\r\n     */\r\n    get data() {\r\n        return this.get('data');\r\n    }\r\n    /**\r\n     * @description The [[EventId]], identifying the raw event\r\n     */\r\n    get index() {\r\n        return this.get('index');\r\n    }\r\n    /**\r\n     * @description The [[EventMetadata]] with the documentation\r\n     */\r\n    get meta() {\r\n        return this.data.meta;\r\n    }\r\n    /**\r\n     * @description The method string identifying the event\r\n     */\r\n    get method() {\r\n        return this.data.method;\r\n    }\r\n    /**\r\n     * @description The section string identifying the event\r\n     */\r\n    get section() {\r\n        return this.data.section;\r\n    }\r\n    /**\r\n     * @description The [[TypeDef]] for the event\r\n     */\r\n    get typeDef() {\r\n        return this.data.typeDef;\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/system/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Tuple.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v7/Events.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Null.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/Event.d.ts","writeByteOrderMark":false,"text":"import { TypeDef } from '../../codec/types';\r\nimport { EventId } from '../../interfaces/system';\r\nimport { Constructor } from '../../types';\r\nimport Struct from '../../codec/Struct';\r\nimport Tuple from '../../codec/Tuple';\r\nimport Metadata from '../../Metadata';\r\nimport { EventMetadata as EventMetadataV7 } from '../../Metadata/v7/Events';\r\nimport Null from '../Null';\r\n/**\r\n * @name EventData\r\n * @description\r\n * Wrapper for the actual data that forms part of an [[Event]]\r\n */\r\nexport declare class EventData extends Tuple {\r\n    private _meta;\r\n    private _method;\r\n    private _section;\r\n    private _typeDef;\r\n    constructor(Types: Constructor[], value: Uint8Array, typeDef: TypeDef[], meta: EventMetadataV7, section: string, method: string);\r\n    /**\r\n     * @description The wrapped [[EventMetadata]]\r\n     */\r\n    readonly meta: EventMetadataV7;\r\n    /**\r\n     * @description The method as a string\r\n     */\r\n    readonly method: string;\r\n    /**\r\n     * @description The section as a string\r\n     */\r\n    readonly section: string;\r\n    /**\r\n     * @description The [[TypeDef]] for this event\r\n     */\r\n    readonly typeDef: TypeDef[];\r\n}\r\n/**\r\n * @name Event\r\n * @description\r\n * A representation of a system event. These are generated via the [[Metadata]] interfaces and\r\n * specific to a specific Substrate runtime\r\n */\r\nexport default class Event extends Struct {\r\n    constructor(_value?: Uint8Array);\r\n    static decodeEvent(value?: Uint8Array): {\r\n        DataType: Constructor<Null> | Constructor<EventData>;\r\n        value?: {\r\n            index: Uint8Array;\r\n            data: Uint8Array;\r\n        };\r\n    };\r\n    static injectMetadata(metadata: Metadata): void;\r\n    /**\r\n     * @description The wrapped [[EventData]]\r\n     */\r\n    readonly data: EventData;\r\n    /**\r\n     * @description The [[EventId]], identifying the raw event\r\n     */\r\n    readonly index: EventId;\r\n    /**\r\n     * @description The [[EventMetadata]] with the documentation\r\n     */\r\n    readonly meta: EventMetadataV7;\r\n    /**\r\n     * @description The method string identifying the event\r\n     */\r\n    readonly method: string;\r\n    /**\r\n     * @description The section string identifying the event\r\n     */\r\n    readonly section: string;\r\n    /**\r\n     * @description The [[TypeDef]] for the event\r\n     */\r\n    readonly typeDef: TypeDef[];\r\n}\r\n"}}
