{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport * as accounts from './accounts';\r\nimport * as balances from './balances';\r\nimport * as chain from './chain';\r\nimport * as contracts from './contracts';\r\nimport * as democracy from './democracy';\r\nimport * as elections from './elections';\r\nimport * as imOnline from './imOnline';\r\nimport * as session from './session';\r\nimport * as staking from './staking';\r\nexport * from './type';\r\n/**\r\n * Returns an object that will inject `api` into all the functions inside\r\n * `allSections`, and keep the object architecture of `allSections`.\r\n */\r\nfunction injectFunctions(api, allSections) {\r\n    return Object\r\n        .keys(allSections)\r\n        .reduce((deriveAcc, sectionName) => {\r\n        const section = allSections[sectionName];\r\n        deriveAcc[sectionName] = Object\r\n            .keys(section)\r\n            .reduce((sectionAcc, _methodName) => {\r\n            const methodName = _methodName;\r\n            // Not sure what to do here, casting as any. Though the final types are good\r\n            const method = section[methodName](api);\r\n            // idem\r\n            sectionAcc[methodName] = method;\r\n            return sectionAcc;\r\n        }, {});\r\n        return deriveAcc;\r\n    }, {});\r\n}\r\nexport const derive = { accounts, balances, chain, contracts, democracy, elections, imOnline, session, staking };\r\n// FIXME I have no idea how to get this done\r\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\nexport default function decorateDerive(api, custom = {}) {\r\n    return {\r\n        ...injectFunctions(api, derive),\r\n        ...injectFunctions(api, custom)\r\n    };\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/accounts/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/balances/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/chain/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/contracts/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/democracy/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/elections/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/imOnline/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/session/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/staking/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/type/index.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/index.d.ts","writeByteOrderMark":false,"text":"import { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { AnyFunction } from '@polkadot/types/types';\r\nimport { Observable } from 'rxjs';\r\nimport * as accounts from './accounts';\r\nimport * as balances from './balances';\r\nimport * as chain from './chain';\r\nimport * as contracts from './contracts';\r\nimport * as democracy from './democracy';\r\nimport * as elections from './elections';\r\nimport * as imOnline from './imOnline';\r\nimport * as session from './session';\r\nimport * as staking from './staking';\r\nexport * from './type';\r\nexport declare type ReturnTypes<Section> = {\r\n    [Method in keyof Section]: Section[Method] extends AnyFunction ? ReturnType<Section[Method]> : never;\r\n};\r\nexport declare type DeriveSections<AllSections> = {\r\n    [Section in keyof AllSections]: ReturnTypes<AllSections[Section]>;\r\n};\r\nexport declare type DeriveCustom = Record<string, Record<string, (api: ApiInterfaceRx) => (...args: any[]) => Observable<any>>>;\r\nexport declare const derive: {\r\n    accounts: typeof accounts;\r\n    balances: typeof balances;\r\n    chain: typeof chain;\r\n    contracts: typeof contracts;\r\n    democracy: typeof democracy;\r\n    elections: typeof elections;\r\n    imOnline: typeof imOnline;\r\n    session: typeof session;\r\n    staking: typeof staking;\r\n};\r\nexport declare type Derive = typeof derive;\r\nexport default function decorateDerive(api: ApiInterfaceRx, custom?: DeriveCustom): {\r\n    accounts: ReturnTypes<typeof accounts>;\r\n    balances: ReturnTypes<typeof balances>;\r\n    chain: ReturnTypes<typeof chain>;\r\n    contracts: ReturnTypes<typeof contracts>;\r\n    democracy: ReturnTypes<typeof democracy>;\r\n    elections: ReturnTypes<typeof elections>;\r\n    imOnline: ReturnTypes<typeof imOnline>;\r\n    session: ReturnTypes<typeof session>;\r\n    staking: ReturnTypes<typeof staking>;\r\n};\r\n"}}
