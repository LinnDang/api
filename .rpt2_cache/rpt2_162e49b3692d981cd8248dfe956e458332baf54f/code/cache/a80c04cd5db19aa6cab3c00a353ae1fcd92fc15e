{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { createType } from '@polkadot/types';\r\nimport BN from 'bn.js';\r\nimport { of, combineLatest } from 'rxjs';\r\nimport { switchMap, map } from 'rxjs/operators';\r\nimport { drr } from '../util/drr';\r\n/**\r\n * @name voterPositions\r\n * @returns An mapping of all current voter accounts to their voter set and global index.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.elections.voterPositions((voters) => {\r\n *   const { index, setIndex, globalIndex } = voters[ALICE];\r\n *   console.log(`ALICE is a voter at index ${index} in voter set ${setIndex}, with global index ${globalIndex}.`);\r\n * });\r\n * ```\r\n */\r\nexport function voterPositions(api) {\r\n    return () => api.query.elections.nextVoterSet().pipe(switchMap((nextVoterSet) => combineLatest(of(api.consts.elections.voterSetSize), api.query.elections.voters.multi([...Array(+nextVoterSet + 1).keys()].map((_, i) => [i])))), map((result) => {\r\n        const [setSize, voters] = result;\r\n        return voters.reduce((result, vec, setIndex) => {\r\n            vec.forEach((e, index) => {\r\n                // re-create the index based on position 0 is [0][0] and likewise\r\n                // 64 (0..63 in first) is [1][0] (the first index value in set 2)\r\n                const accountId = e.unwrapOr(null);\r\n                if (accountId) {\r\n                    result[accountId.toString()] = {\r\n                        globalIndex: setSize.muln(setIndex).addn(index),\r\n                        index: new BN(index),\r\n                        setIndex: createType('SetIndex', setIndex)\r\n                    };\r\n                }\r\n            });\r\n            return result;\r\n        }, {});\r\n    }), drr());\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/elections/voterPositions.d.ts","writeByteOrderMark":false,"text":"import { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { DerivedVoterPositions } from '../types';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * @name voterPositions\r\n * @returns An mapping of all current voter accounts to their voter set and global index.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.elections.voterPositions((voters) => {\r\n *   const { index, setIndex, globalIndex } = voters[ALICE];\r\n *   console.log(`ALICE is a voter at index ${index} in voter set ${setIndex}, with global index ${globalIndex}.`);\r\n * });\r\n * ```\r\n */\r\nexport declare function voterPositions(api: ApiInterfaceRx): () => Observable<DerivedVoterPositions>;\r\n"}}
