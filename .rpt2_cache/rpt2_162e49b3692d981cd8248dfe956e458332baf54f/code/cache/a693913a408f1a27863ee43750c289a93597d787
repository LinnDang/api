{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert } from '@polkadot/util';\r\nimport Enum from '../../codec/Enum';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\nimport Bytes from '../../primitive/Bytes';\r\nimport Text from '../../primitive/Text';\r\nimport Type from '../../primitive/Type';\r\nexport class StorageFunctionModifier extends Enum {\r\n    constructor(value) {\r\n        super(['Optional', 'Default', 'Required'], value);\r\n    }\r\n    /**\r\n     * @description `true` if the storage entry is optional\r\n     */\r\n    get isOptional() {\r\n        return this.toNumber() === 0;\r\n    }\r\n    toJSON() {\r\n        // This looks prettier in the generated JSON\r\n        return this.toString();\r\n    }\r\n}\r\nexport class MapType extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            key: Type,\r\n            value: Type\r\n        }, value);\r\n        this._isLinked = false;\r\n        if (value && value.isLinked) {\r\n            this._isLinked = true;\r\n        }\r\n    }\r\n    /**\r\n     * @description The mapped key as [[Type]]\r\n     */\r\n    get key() {\r\n        return this.get('key');\r\n    }\r\n    /**\r\n     * @description The mapped value as [[Type]]\r\n     */\r\n    get value() {\r\n        return this.get('value');\r\n    }\r\n    /**\r\n     * @description Is this an enumerable linked map\r\n     */\r\n    get isLinked() {\r\n        return this._isLinked;\r\n    }\r\n}\r\nexport class PlainType extends Type {\r\n}\r\nexport class StorageFunctionType extends Enum {\r\n    constructor(value, index) {\r\n        super({\r\n            PlainType,\r\n            MapType\r\n        }, value, index);\r\n    }\r\n    /**\r\n     * @description The value as a mapped value\r\n     */\r\n    get asMap() {\r\n        assert(this.isMap, `Cannot convert '${this.type}' via asMap`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description The value as a [[Type]] value\r\n     */\r\n    get asType() {\r\n        assert(this.isPlainType, `Cannot convert '${this.type}' via asType`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description `true` if the storage entry is a map\r\n     */\r\n    get isMap() {\r\n        return this.toNumber() === 1;\r\n    }\r\n    /**\r\n     * @description `true` if the storage entry is a plain type\r\n     */\r\n    get isPlainType() {\r\n        return this.toNumber() === 0;\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        if (this.isMap) {\r\n            if (this.asMap.isLinked) {\r\n                return `(${this.asMap.value.toString()}, Linkage<${this.asMap.key.toString()}>)`;\r\n            }\r\n            return this.asMap.value.toString();\r\n        }\r\n        return this.asType.toString();\r\n    }\r\n}\r\nexport class StorageFunctionMetadata extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            name: Text,\r\n            modifier: StorageFunctionModifier,\r\n            type: StorageFunctionType,\r\n            fallback: Bytes,\r\n            documentation: Vec.with(Text)\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description The default value of the storage function\r\n     * @deprecated Use `.fallback` instead.\r\n     */\r\n    get default() {\r\n        return this.fallback;\r\n    }\r\n    /**\r\n     * @description The default value of the storage function\r\n     */\r\n    get fallback() {\r\n        return this.get('fallback');\r\n    }\r\n    /**\r\n     * @description The [[Text]] documentation\r\n     */\r\n    get documentation() {\r\n        return this.get('documentation');\r\n    }\r\n    /**\r\n     * @description The [[Text]] documentation\r\n     * @deprecated Use `.documentation` instead.\r\n     */\r\n    get docs() {\r\n        return this.documentation;\r\n    }\r\n    /**\r\n     * @description The key name\r\n     */\r\n    get name() {\r\n        return this.get('name');\r\n    }\r\n    /**\r\n     * @description The modifier\r\n     */\r\n    get modifier() {\r\n        return this.get('modifier');\r\n    }\r\n    /**\r\n     * @description The [[StorageFunctionType]]\r\n     */\r\n    get type() {\r\n        return this.get('type');\r\n    }\r\n}\r\nexport class StorageMetadata extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            prefix: Text,\r\n            functions: Vec.with(StorageFunctionMetadata)\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description The [[StorageFunctionMetadata]] for the section\r\n     */\r\n    get functions() {\r\n        return this.get('functions');\r\n    }\r\n    /**\r\n     * @description The section prefix\r\n     */\r\n    get prefix() {\r\n        return this.get('prefix');\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Enum.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Vec.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Bytes.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Text.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Type.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/Metadata/v0/Storage.d.ts","writeByteOrderMark":false,"text":"import { AnyNumber } from '../../types';\r\nimport Enum from '../../codec/Enum';\r\nimport Struct from '../../codec/Struct';\r\nimport Vec from '../../codec/Vec';\r\nimport Bytes from '../../primitive/Bytes';\r\nimport Text from '../../primitive/Text';\r\nimport Type from '../../primitive/Type';\r\nexport declare class StorageFunctionModifier extends Enum {\r\n    constructor(value?: any);\r\n    /**\r\n     * @description `true` if the storage entry is optional\r\n     */\r\n    readonly isOptional: boolean;\r\n    toJSON(): string;\r\n}\r\nexport declare class MapType extends Struct {\r\n    private _isLinked;\r\n    constructor(value?: any);\r\n    /**\r\n     * @description The mapped key as [[Type]]\r\n     */\r\n    readonly key: Type;\r\n    /**\r\n     * @description The mapped value as [[Type]]\r\n     */\r\n    readonly value: Type;\r\n    /**\r\n     * @description Is this an enumerable linked map\r\n     */\r\n    readonly isLinked: boolean;\r\n}\r\nexport declare class PlainType extends Type {\r\n}\r\nexport declare class StorageFunctionType extends Enum {\r\n    constructor(value?: any, index?: number);\r\n    /**\r\n     * @description The value as a mapped value\r\n     */\r\n    readonly asMap: MapType;\r\n    /**\r\n     * @description The value as a [[Type]] value\r\n     */\r\n    readonly asType: PlainType;\r\n    /**\r\n     * @description `true` if the storage entry is a map\r\n     */\r\n    readonly isMap: boolean;\r\n    /**\r\n     * @description `true` if the storage entry is a plain type\r\n     */\r\n    readonly isPlainType: boolean;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n}\r\nexport interface StorageFunctionMetadataValue {\r\n    name: string | Text;\r\n    modifier: StorageFunctionModifier | AnyNumber;\r\n    type: StorageFunctionType;\r\n    fallback: Bytes;\r\n    documentation: Vec<Text> | string[];\r\n}\r\nexport declare class StorageFunctionMetadata extends Struct {\r\n    constructor(value?: StorageFunctionMetadataValue | Uint8Array);\r\n    /**\r\n     * @description The default value of the storage function\r\n     * @deprecated Use `.fallback` instead.\r\n     */\r\n    readonly default: Bytes;\r\n    /**\r\n     * @description The default value of the storage function\r\n     */\r\n    readonly fallback: Bytes;\r\n    /**\r\n     * @description The [[Text]] documentation\r\n     */\r\n    readonly documentation: Vec<Text>;\r\n    /**\r\n     * @description The [[Text]] documentation\r\n     * @deprecated Use `.documentation` instead.\r\n     */\r\n    readonly docs: Vec<Text>;\r\n    /**\r\n     * @description The key name\r\n     */\r\n    readonly name: Text;\r\n    /**\r\n     * @description The modifier\r\n     */\r\n    readonly modifier: StorageFunctionModifier;\r\n    /**\r\n     * @description The [[StorageFunctionType]]\r\n     */\r\n    readonly type: StorageFunctionType;\r\n}\r\nexport declare class StorageMetadata extends Struct {\r\n    constructor(value?: any);\r\n    /**\r\n     * @description The [[StorageFunctionMetadata]] for the section\r\n     */\r\n    readonly functions: Vec<StorageFunctionMetadata>;\r\n    /**\r\n     * @description The section prefix\r\n     */\r\n    readonly prefix: Text;\r\n}\r\n"}}
