{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert, hexToU8a, isHex, isString, stringToU8a, u8aToString, u8aToHex } from '@polkadot/util';\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\nimport createType from '../codec/createType';\r\nimport Compact from '../codec/Compact';\r\n/**\r\n * @name Text\r\n * @description\r\n * This is a string wrapper, along with the length. It is used both for strings as well\r\n * as items such as documentation. It simply extends the standard JS `String` built-in\r\n * object, inheriting all methods exposed from `String`.\r\n * @noInheritDoc\r\n */\r\n// TODO\r\n//   - Strings should probably be trimmed (docs do come through with extra padding)\r\nexport default class Text extends String {\r\n    constructor(value = '') {\r\n        super(Text.decodeText(value));\r\n    }\r\n    static decodeText(value) {\r\n        if (isHex(value)) {\r\n            return u8aToString(hexToU8a(value.toString()));\r\n        }\r\n        else if (value instanceof Uint8Array) {\r\n            if (!value.length) {\r\n                return '';\r\n            }\r\n            const [offset, length] = Compact.decodeU8a(value);\r\n            const total = offset + length.toNumber();\r\n            assert(total <= value.length, `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\r\n            return u8aToString(value.subarray(offset, total));\r\n        }\r\n        return `${value}`;\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return this.toU8a().length;\r\n    }\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    get hash() {\r\n        return createType('Hash', blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description Checks if the value is an empty value\r\n     */\r\n    get isEmpty() {\r\n        return this.length === 0;\r\n    }\r\n    /**\r\n     * @description The length of the value\r\n     */\r\n    get length() {\r\n        // only included here since we ignore inherited docs\r\n        return super.length;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return isString(other)\r\n            ? this.toString() === other.toString()\r\n            : false;\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex() {\r\n        // like  with Vec<u8>, when we are encoding to hex, we don't actually add\r\n        // the length prefix (it is already implied by the actual string length)\r\n        return u8aToHex(this.toU8a(true));\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return 'Text';\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        // only included here since we do not inherit docs\r\n        return super.toString();\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare) {\r\n        const encoded = stringToU8a(this.toString());\r\n        return isBare\r\n            ? encoded\r\n            : Compact.addLengthPrefix(encoded);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Compact.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Text.d.ts","writeByteOrderMark":false,"text":"import { AnyU8a, Codec, IHash } from '../types';\r\n/**\r\n * @name Text\r\n * @description\r\n * This is a string wrapper, along with the length. It is used both for strings as well\r\n * as items such as documentation. It simply extends the standard JS `String` built-in\r\n * object, inheriting all methods exposed from `String`.\r\n * @noInheritDoc\r\n */\r\nexport default class Text extends String implements Codec {\r\n    constructor(value?: Text | string | AnyU8a | {\r\n        toString: () => string;\r\n    });\r\n    private static decodeText;\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    readonly hash: IHash;\r\n    /**\r\n     * @description Checks if the value is an empty value\r\n     */\r\n    readonly isEmpty: boolean;\r\n    /**\r\n     * @description The length of the value\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(): string;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): string;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\n"}}
