{"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport EventEmitter from 'eventemitter3';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport decorateDerive from '@polkadot/api-derive';\r\nimport constantsFromMeta from '@polkadot/api-metadata/consts/fromMetadata';\r\nimport extrinsicsFromMeta from '@polkadot/api-metadata/extrinsics/fromMetadata';\r\nimport storageFromMeta from '@polkadot/api-metadata/storage/fromMetadata';\r\nimport RpcCore from '@polkadot/rpc-core';\r\nimport { WsProvider } from '@polkadot/rpc-provider';\r\nimport { getTypeRegistry, GenericCall, GenericEvent, Metadata, Null } from '@polkadot/types';\r\nimport { LinkageResult } from '@polkadot/types/codec/Linkage';\r\nimport { DEFAULT_VERSION as EXTRINSIC_DEFAULT_VERSION } from '@polkadot/types/primitive/Extrinsic/constants';\r\nimport { assert, compactStripLength, isString, isUndefined, logger, u8aToHex, u8aToU8a } from '@polkadot/util';\r\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\r\nimport createSubmittable from './SubmittableExtrinsic';\r\nimport { decorateSections } from './util/decorate';\r\nconst INIT_ERROR = `Api needs to be initialised before using, listen on 'ready'`;\r\nconst KEEPALIVE_INTERVAL = 15000;\r\nconst l = logger('api/decorator');\r\nlet pkgJson;\r\ntry {\r\n    pkgJson = require('./package.json');\r\n}\r\ncatch (error) {\r\n    // development environment\r\n    pkgJson = { name: '@polkadot/api', version: '-' };\r\n}\r\n/**\r\n * Put the `this.onCall` function of ApiRx here, because it is needed by\r\n * `api._rx`.\r\n */\r\nfunction rxDecorateMethod(method) {\r\n    return method;\r\n}\r\nexport default class ApiBase {\r\n    /**\r\n     * @description Create an instance of the class\r\n     *\r\n     * @param options Options object to create API instance or a Provider instance\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * import Api from '@polkadot/api/promise';\r\n     *\r\n     * const api = new Api().isReady();\r\n     *\r\n     * api.rpc.subscribeNewHead((header) => {\r\n     *   console.log(`new block #${header.number.toNumber()}`);\r\n     * });\r\n     * ```\r\n     */\r\n    constructor(options = {}, type) {\r\n        this._extrinsicType = EXTRINSIC_DEFAULT_VERSION;\r\n        this._isReady = false;\r\n        this._rx = {};\r\n        const thisProvider = options.source\r\n            ? options.source._rpcCore.provider.clone()\r\n            : (options.provider || new WsProvider());\r\n        // We only register the types (global) if this is not a cloned instance.\r\n        // Do right up-front, so we get in the user types before we are actually\r\n        // doing anything on-chain, this ensures we have the overrides in-place\r\n        if (!options.source && options.types) {\r\n            this.registerTypes(options.types);\r\n        }\r\n        this._options = options;\r\n        this._type = type;\r\n        this._eventemitter = new EventEmitter();\r\n        this._rpcCore = new RpcCore(thisProvider);\r\n        this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected());\r\n        assert(this.hasSubscriptions, 'Api can only be used with a provider supporting subscriptions');\r\n        this._rpc = this.decorateRpc(this._rpcCore, this.decorateMethod);\r\n        this._rx.rpc = this.decorateRpc(this._rpcCore, rxDecorateMethod);\r\n        this._queryMulti = this.decorateMulti(this.decorateMethod);\r\n        this._rx.queryMulti = this.decorateMulti(rxDecorateMethod);\r\n        this._rx.signer = options.signer;\r\n        this.init();\r\n    }\r\n    /**\r\n     * @description  Returns th version of extrinsics in-use on this chain\r\n     */\r\n    get extrinsicVersion() {\r\n        return this._extrinsicType;\r\n    }\r\n    /**\r\n     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.\r\n     */\r\n    get genesisHash() {\r\n        assert(!isUndefined(this._genesisHash), INIT_ERROR);\r\n        return this._genesisHash;\r\n    }\r\n    /**\r\n     * @description `true` when subscriptions are supported\r\n     */\r\n    get hasSubscriptions() {\r\n        return this._rpcCore.provider.hasSubscriptions;\r\n    }\r\n    /**\r\n     * @description The library information name & version (from package.json)\r\n     */\r\n    get libraryInfo() {\r\n        return `${pkgJson.name} v${pkgJson.version}`;\r\n    }\r\n    /**\r\n     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.\r\n     */\r\n    get runtimeMetadata() {\r\n        assert(!isUndefined(this._runtimeMetadata), INIT_ERROR);\r\n        return this._runtimeMetadata;\r\n    }\r\n    /**\r\n     * @description Contains the version information for the current runtime.\r\n     */\r\n    get runtimeVersion() {\r\n        assert(!isUndefined(this._runtimeVersion), INIT_ERROR);\r\n        return this._runtimeVersion;\r\n    }\r\n    /**\r\n     * @description The type of this API instance, either 'rxjs' or 'promise'\r\n     */\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    /**\r\n     * @description Finds the definition for a specific [[Call]] based on the index supplied\r\n     */\r\n    findCall(callIndex) {\r\n        return GenericCall.findFunction(u8aToU8a(callIndex));\r\n    }\r\n    /**\r\n     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair\r\n     */\r\n    setSigner(signer) {\r\n        this._rx.signer = signer;\r\n    }\r\n    /**\r\n     * @description Signs a raw signer payload, string or Uint8Array\r\n     */\r\n    async sign(signer, data) {\r\n        // NOTE Do we really want to do this? Or turn it into an observable for rxjs?\r\n        if (isString(signer)) {\r\n            if (!this._rx.signer || !this._rx.signer.signRaw) {\r\n                throw new Error('No signer exists with a signRaw interface');\r\n            }\r\n            return (await this._rx.signer.signRaw({\r\n                type: 'bytes',\r\n                ...data,\r\n                address: signer\r\n            })).signature;\r\n        }\r\n        return u8aToHex(signer.sign(u8aToU8a(data.data)));\r\n    }\r\n    /**\r\n     * @description Derived results that are injected into the API, allowing for combinations of various query results.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.derive.chain.bestNumber((number) => {\r\n     *   console.log('best number', number);\r\n     * });\r\n     * ```\r\n     */\r\n    get derive() {\r\n        assert(!isUndefined(this._derive), INIT_ERROR);\r\n        return this._derive;\r\n    }\r\n    /**\r\n     * @description Contains the parameter types (constants) of all modules.\r\n     *\r\n     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * console.log(api.consts.democracy.enactmentPeriod.toString())\r\n     * ```\r\n     */\r\n    get consts() {\r\n        assert(!isUndefined(this._consts), INIT_ERROR);\r\n        return this._consts;\r\n    }\r\n    /**\r\n     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.\r\n     *\r\n     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.accountNonce(<accountId>)` (retrieving the associated nonce for an account), takes the `AccountId` as a parameter.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.query.balances.freeBalance(<accountId>, (balance) => {\r\n     *   console.log('new balance', balance);\r\n     * });\r\n     * ```\r\n     */\r\n    get query() {\r\n        assert(!isUndefined(this._query), INIT_ERROR);\r\n        return this._query;\r\n    }\r\n    /**\r\n     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * const unsub = await api.queryMulti(\r\n     *   [\r\n     *     // you can include the storage without any parameters\r\n     *     api.query.balances.totalIssuance,\r\n     *     // or you can pass parameters to the storage query\r\n     *     [api.query.balances.freeBalance, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']\r\n     *   ],\r\n     *   ([existential, balance]) => {\r\n     *     console.log(`You have ${balance.sub(existential)} more than the existential deposit`);\r\n     *\r\n     *     unsub();\r\n     *   }\r\n     * );\r\n     * ```\r\n     */\r\n    get queryMulti() {\r\n        return this._queryMulti;\r\n    }\r\n    /**\r\n     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.\r\n     *\r\n     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (usine known keys) and the submission of transactions.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.rpc.chain.subscribeNewHead((header) => {\r\n     *   console.log('new header', header);\r\n     * });\r\n     * ```\r\n     */\r\n    get rpc() {\r\n        return this._rpc;\r\n    }\r\n    /**\r\n     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.tx.balances\r\n     *   .transfer(<recipientId>, <balance>)\r\n     *   .signAndSend(<keyPair>, ({status}) => {\r\n     *     console.log('tx status', status.asFinalized.toHex());\r\n     *   });\r\n     * ```\r\n     */\r\n    get tx() {\r\n        assert(!isUndefined(this._extrinsics), INIT_ERROR);\r\n        return this._extrinsics;\r\n    }\r\n    /**\r\n     * @description Disconnect from the underlying provider, halting all comms\r\n     */\r\n    disconnect() {\r\n        this._rpcCore.disconnect();\r\n    }\r\n    /**\r\n     * @description Attach an eventemitter handler to listen to a specific event\r\n     *\r\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\r\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.on('connected', (): void => {\r\n     *   console.log('API has been connected to the endpoint');\r\n     * });\r\n     *\r\n     * api.on('disconnected', (): void => {\r\n     *   console.log('API has been disconnected from the endpoint');\r\n     * });\r\n     * ```\r\n     */\r\n    on(type, handler) {\r\n        this._eventemitter.on(type, handler);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Remove the given eventemitter handler\r\n     *\r\n     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\r\n     * @param handler The callback to unregister.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * const handler = (): void => {\r\n     *  console.log('Connected !);\r\n     * };\r\n     *\r\n     * // Start listening\r\n     * api.on('connected', handler);\r\n     *\r\n     * // Stop listening\r\n     * api.off('connected', handler);\r\n     * ```\r\n     */\r\n    off(type, handler) {\r\n        this._eventemitter.removeListener(type, handler);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Attach an one-time eventemitter handler to listen to a specific event\r\n     *\r\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\r\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.once('connected', (): void => {\r\n     *   console.log('API has been connected to the endpoint');\r\n     * });\r\n     *\r\n     * api.once('disconnected', (): void => {\r\n     *   console.log('API has been disconnected from the endpoint');\r\n     * });\r\n     * ```\r\n     */\r\n    once(type, handler) {\r\n        this._eventemitter.once(type, handler);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Register additional user-defined of chain-specific types in the type registry\r\n     */\r\n    registerTypes(types) {\r\n        if (types) {\r\n            getTypeRegistry().register(types);\r\n        }\r\n    }\r\n    emit(type, ...args) {\r\n        this._eventemitter.emit(type, ...args);\r\n    }\r\n    init() {\r\n        let healthTimer = null;\r\n        this._rpcCore.provider.on('disconnected', () => {\r\n            this.emit('disconnected');\r\n            this._isConnected.next(false);\r\n            if (healthTimer) {\r\n                clearInterval(healthTimer);\r\n                healthTimer = null;\r\n            }\r\n        });\r\n        this._rpcCore.provider.on('error', (error) => {\r\n            this.emit('error', error);\r\n        });\r\n        this._rpcCore.provider.on('connected', async () => {\r\n            this.emit('connected');\r\n            this._isConnected.next(true);\r\n            try {\r\n                const [hasMeta, cryptoReady] = await Promise.all([\r\n                    this.loadMeta(),\r\n                    cryptoWaitReady()\r\n                ]);\r\n                if (hasMeta && !this._isReady && cryptoReady) {\r\n                    this._isReady = true;\r\n                    this.emit('ready', this);\r\n                }\r\n                healthTimer = setInterval(() => {\r\n                    this._rpcCore.system.health().toPromise().catch(() => {\r\n                        // ignore\r\n                    });\r\n                }, KEEPALIVE_INTERVAL);\r\n            }\r\n            catch (_error) {\r\n                const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);\r\n                l.error(error);\r\n                this.emit('error', error);\r\n            }\r\n        });\r\n    }\r\n    async loadMeta() {\r\n        const { metadata = {} } = this._options;\r\n        // only load from on-chain if we are not a clone (default path), alternatively\r\n        // just use the values from the source instance provided\r\n        if (!this._options.source || !this._options.source._isReady) {\r\n            [this._genesisHash, this._runtimeVersion] = await Promise.all([\r\n                this._rpcCore.chain.getBlockHash(0).toPromise(),\r\n                this._rpcCore.chain.getRuntimeVersion().toPromise()\r\n            ]);\r\n            // NOTE The SessionKeys definition for Polkadot and Substrate (OpaqueKeys\r\n            // implementation) are different. Detect Polkadot and inject the `Keys`\r\n            // definition as applicable. (3 keys in substrate vs 4 in Polkadot).\r\n            if (this._runtimeVersion.specName.eq('polkadot')) {\r\n                getTypeRegistry().register({ Keys: 'SessionKeysPolkadot' });\r\n            }\r\n            const metadataKey = `${this._genesisHash}-${this._runtimeVersion.specVersion}`;\r\n            if (metadataKey in metadata) {\r\n                this._runtimeMetadata = new Metadata(metadata[metadataKey]);\r\n            }\r\n            else {\r\n                this._runtimeMetadata = await this._rpcCore.state.getMetadata().toPromise();\r\n            }\r\n            // get unique types & validate\r\n            this.runtimeMetadata.getUniqTypes(false);\r\n        }\r\n        else {\r\n            this._extrinsicType = this._options.source.extrinsicVersion;\r\n            this._runtimeMetadata = this._options.source.runtimeMetadata;\r\n            this._runtimeVersion = this._options.source.runtimeVersion;\r\n            this._genesisHash = this._options.source.genesisHash;\r\n        }\r\n        const extrinsics = extrinsicsFromMeta(this.runtimeMetadata);\r\n        const storage = storageFromMeta(this.runtimeMetadata);\r\n        const constants = constantsFromMeta(this.runtimeMetadata);\r\n        // only inject if we are not a clone (global init)\r\n        if (!this._options.source) {\r\n            GenericEvent.injectMetadata(this.runtimeMetadata);\r\n            GenericCall.injectMethods(extrinsics);\r\n            // detect the extrinsic version in-use based on the last block\r\n            const lastBlock = await this._rpcCore.chain.getBlock().toPromise();\r\n            this._extrinsicType = lastBlock.block.extrinsics[0].type;\r\n            // HACK Assume that old versions, substrate 1.x is u64 BlockNumber/Nonce\r\n            // and has the old EventRecord format. Remove this ASAP with support for\r\n            // Alex dropped\r\n            if (this._extrinsicType === 1) {\r\n                getTypeRegistry().register({\r\n                    BlockNumber: 'u64',\r\n                    Index: 'u64',\r\n                    EventRecord: 'EventRecord0to76'\r\n                });\r\n            }\r\n        }\r\n        this._extrinsics = this.decorateExtrinsics(extrinsics, this.decorateMethod);\r\n        this._query = this.decorateStorage(storage, this.decorateMethod);\r\n        this._consts = constants;\r\n        this._rx.extrinsicType = this._extrinsicType;\r\n        this._rx.genesisHash = this._genesisHash;\r\n        this._rx.runtimeVersion = this._runtimeVersion;\r\n        this._rx.tx = this.decorateExtrinsics(extrinsics, rxDecorateMethod);\r\n        this._rx.query = this.decorateStorage(storage, rxDecorateMethod);\r\n        this._rx.consts = constants;\r\n        this._derive = this.decorateDerive(this._rx, this.decorateMethod);\r\n        return true;\r\n    }\r\n    decorateFunctionMeta(input, output) {\r\n        output.meta = input.meta;\r\n        output.method = input.method;\r\n        output.section = input.section;\r\n        output.toJSON = input.toJSON;\r\n        if (input.callIndex) {\r\n            output.callIndex = input.callIndex;\r\n        }\r\n        return output;\r\n    }\r\n    decorateRpc(rpc, decorateMethod) {\r\n        return ['author', 'chain', 'state', 'system'].reduce((result, _sectionName) => {\r\n            const sectionName = _sectionName;\r\n            // @ts-ignore Hard to type these correctly, I don't understand the TS errors\r\n            result[sectionName] = Object.keys(rpc[sectionName]).reduce((section, methodName) => {\r\n                // @ts-ignore\r\n                const method = rpc[sectionName][methodName];\r\n                // @ts-ignore\r\n                section[methodName] = decorateMethod(method, { methodName });\r\n                return section;\r\n            }, {});\r\n            return result;\r\n        }, {});\r\n    }\r\n    decorateMulti(decorateMethod) {\r\n        return decorateMethod((calls) => {\r\n            const mapped = calls.map((arg) => \r\n            // the input is a QueryableStorageEntry, convert to StorageEntry\r\n            Array.isArray(arg)\r\n                ? [arg[0].creator, ...arg.slice(1)]\r\n                : [arg.creator]);\r\n            return this._rpcCore.state.subscribeStorage(mapped);\r\n        });\r\n    }\r\n    decorateExtrinsics(extrinsics, decorateMethod) {\r\n        const creator = (value) => createSubmittable(this.type, this._rx, decorateMethod, value);\r\n        return Object.keys(extrinsics).reduce((result, sectionName) => {\r\n            const section = extrinsics[sectionName];\r\n            result[sectionName] = Object.keys(section).reduce((result, methodName) => {\r\n                result[methodName] = this.decorateExtrinsicEntry(section[methodName], decorateMethod);\r\n                return result;\r\n            }, {});\r\n            return result;\r\n        }, creator);\r\n    }\r\n    decorateExtrinsicEntry(method, decorateMethod) {\r\n        const decorated = (...params) => createSubmittable(this.type, this._rx, decorateMethod, method(...params));\r\n        return this.decorateFunctionMeta(method, decorated);\r\n    }\r\n    decorateStorage(storage, decorateMethod) {\r\n        return Object.keys(storage).reduce((result, sectionName) => {\r\n            const section = storage[sectionName];\r\n            result[sectionName] = Object.keys(section).reduce((result, methodName) => {\r\n                result[methodName] = this.decorateStorageEntry(section[methodName], decorateMethod);\r\n                return result;\r\n            }, {});\r\n            return result;\r\n        }, {});\r\n    }\r\n    decorateStorageEntry(creator, decorateMethod) {\r\n        const decorated = creator.headKey\r\n            ? this.decorateStorageEntryLinked(creator, decorateMethod)\r\n            : decorateMethod((...args) => {\r\n                return this._rpcCore.state\r\n                    // Unfortunately for one-shot calls we also use .subscribeStorage here\r\n                    .subscribeStorage([\r\n                    creator.meta.type.isDoubleMap\r\n                        ? [creator, args]\r\n                        : [creator, ...args]\r\n                ])\r\n                    .pipe(\r\n                // state_storage returns an array of values, since we have just subscribed to\r\n                // a single entry, we pull that from the array and return it as-is\r\n                map(([data]) => data));\r\n            }, {\r\n                methodName: creator.method\r\n            });\r\n        decorated.creator = creator;\r\n        decorated.at = decorateMethod((hash, arg1, arg2) => this._rpcCore.state.getStorage(creator.meta.type.isDoubleMap\r\n            ? [creator, [arg1, arg2]]\r\n            : [creator, arg1], hash));\r\n        decorated.hash = decorateMethod((arg1, arg2) => this._rpcCore.state.getStorageHash(creator.meta.type.isDoubleMap\r\n            ? [creator, [arg1, arg2]]\r\n            : [creator, arg1]));\r\n        decorated.key = (arg1, arg2) => u8aToHex(compactStripLength(creator(creator.meta.type.isDoubleMap ? [arg1, arg2] : arg1))[1]);\r\n        // When using double map storage function, user need to path double map key as an array\r\n        decorated.multi = decorateMethod((args) => this._rpcCore.state\r\n            .subscribeStorage(args.map((arg) => [creator, arg])));\r\n        decorated.size = decorateMethod((arg1, arg2) => this._rpcCore.state.getStorageSize(creator.meta.type.isDoubleMap\r\n            ? [creator, [arg1, arg2]]\r\n            : [creator, arg1]));\r\n        return this.decorateFunctionMeta(creator, decorated);\r\n    }\r\n    decorateStorageEntryLinked(creator, decorateMethod) {\r\n        const result = new Map();\r\n        let subject;\r\n        let head = null;\r\n        // retrieve a value based on the key, iterating if it has a next entry. Since\r\n        // entries can be re-linked in the middle of a list, we subscribe here to make\r\n        // sure we catch any updates, no matter the list position\r\n        const getNext = (key) => {\r\n            return this._rpcCore.state.subscribeStorage([[creator, key]])\r\n                .pipe(switchMap(([data]) => {\r\n                const linkage = data[1];\r\n                result.set(key, data);\r\n                // iterate from this key to the children, constructing\r\n                // entries for all those found and available\r\n                if (linkage.next.isSome) {\r\n                    return getNext(linkage.next.unwrap());\r\n                }\r\n                const keys = [];\r\n                const values = [];\r\n                let nextKey = head;\r\n                // loop through the results collected, starting at the head an re-creating\r\n                // the list. Our map may have old entries, based on the linking these will\r\n                // not be returned in the final result\r\n                while (nextKey) {\r\n                    const entry = result.get(nextKey);\r\n                    if (!entry) {\r\n                        break;\r\n                    }\r\n                    const [item, linkage] = entry;\r\n                    keys.push(nextKey);\r\n                    values.push(item);\r\n                    nextKey = linkage.next && linkage.next.unwrapOr(null);\r\n                }\r\n                const nextResult = values.length\r\n                    ? new LinkageResult([keys[0].constructor, keys], [values[0].constructor, values])\r\n                    : new LinkageResult([Null, []], [Null, []]);\r\n                // we set our result into a subject so we have a single observable for\r\n                // which the value changes over time. Initially create, follow-up next\r\n                if (subject) {\r\n                    subject.next(nextResult);\r\n                }\r\n                else {\r\n                    subject = new BehaviorSubject(nextResult);\r\n                }\r\n                return subject;\r\n            }));\r\n        };\r\n        // this handles the case where the head changes effectively, i.e. a new entry\r\n        // appears at the top of the list, the new getNext gets kicked off\r\n        return decorateMethod((...args) => args.length\r\n            ? this._rpcCore.state\r\n                .subscribeStorage([[creator, ...args]])\r\n                .pipe(map(([data]) => data))\r\n            : this._rpcCore.state\r\n                .subscribeStorage([creator.headKey])\r\n                .pipe(switchMap(([key]) => {\r\n                head = key;\r\n                return getNext(key);\r\n            })));\r\n    }\r\n    // FIXME I have no idea how to get this done\r\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n    decorateDerive(apiRx, decorateMethod) {\r\n        // Pull in derive from api-derive\r\n        const derive = decorateDerive(apiRx, this._options.derives);\r\n        return decorateSections(derive, decorateMethod);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/rpc-core/src/jsonrpc.types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/eventemitter3/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-metadata/src/consts/fromMetadata/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-metadata/src/consts/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-metadata/src/extrinsics/fromMetadata/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-metadata/src/storage/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-metadata/src/storage/fromMetadata/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/rpc-core/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/rpc-provider/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Linkage.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/constants.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/StorageKey.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/SubmittableExtrinsic.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/util/decorate.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api/src/Base.d.ts","writeByteOrderMark":false,"text":"import { RpcInterface } from '@polkadot/rpc-core/jsonrpc.types';\r\nimport { Hash, RuntimeVersion } from '@polkadot/types/interfaces';\r\nimport { CallFunction, RegistryTypes } from '@polkadot/types/types';\r\nimport { ApiInterfaceEvents, ApiOptions, ApiTypes, DecorateMethodOptions, DecoratedRpc, QueryableStorage, QueryableStorageMulti, SignerPayloadRawBase, SubmittableExtrinsics, Signer } from './types';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Constants } from '@polkadot/api-metadata/consts/types';\r\nimport RpcCore from '@polkadot/rpc-core';\r\nimport { Metadata } from '@polkadot/types';\r\ninterface KeyringSigner {\r\n    sign(message: Uint8Array): Uint8Array;\r\n}\r\nexport default abstract class ApiBase<ApiType> {\r\n    private _consts?;\r\n    private _derive?;\r\n    private _eventemitter;\r\n    private _extrinsics?;\r\n    private _extrinsicType;\r\n    private _genesisHash?;\r\n    protected _isConnected: BehaviorSubject<boolean>;\r\n    private _isReady;\r\n    protected readonly _options: ApiOptions;\r\n    private _query?;\r\n    private _queryMulti;\r\n    private _rpc;\r\n    protected _rpcCore: RpcCore;\r\n    private _runtimeMetadata?;\r\n    private _runtimeVersion?;\r\n    private _rx;\r\n    private _type;\r\n    /**\r\n     * @description Create an instance of the class\r\n     *\r\n     * @param options Options object to create API instance or a Provider instance\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * import Api from '@polkadot/api/promise';\r\n     *\r\n     * const api = new Api().isReady();\r\n     *\r\n     * api.rpc.subscribeNewHead((header) => {\r\n     *   console.log(`new block #${header.number.toNumber()}`);\r\n     * });\r\n     * ```\r\n     */\r\n    constructor(options: ApiOptions | undefined, type: ApiTypes);\r\n    /**\r\n     * @description  Returns th version of extrinsics in-use on this chain\r\n     */\r\n    readonly extrinsicVersion: number;\r\n    /**\r\n     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.\r\n     */\r\n    readonly genesisHash: Hash;\r\n    /**\r\n     * @description `true` when subscriptions are supported\r\n     */\r\n    readonly hasSubscriptions: boolean;\r\n    /**\r\n     * @description The library information name & version (from package.json)\r\n     */\r\n    readonly libraryInfo: string;\r\n    /**\r\n     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.\r\n     */\r\n    readonly runtimeMetadata: Metadata;\r\n    /**\r\n     * @description Contains the version information for the current runtime.\r\n     */\r\n    readonly runtimeVersion: RuntimeVersion;\r\n    /**\r\n     * @description The type of this API instance, either 'rxjs' or 'promise'\r\n     */\r\n    readonly type: ApiTypes;\r\n    /**\r\n     * @description Finds the definition for a specific [[Call]] based on the index supplied\r\n     */\r\n    findCall(callIndex: Uint8Array | string): CallFunction;\r\n    /**\r\n     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair\r\n     */\r\n    setSigner(signer: Signer): void;\r\n    /**\r\n     * @description Signs a raw signer payload, string or Uint8Array\r\n     */\r\n    sign(signer: KeyringSigner | string, data: SignerPayloadRawBase): Promise<string>;\r\n    /**\r\n     * @description Derived results that are injected into the API, allowing for combinations of various query results.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.derive.chain.bestNumber((number) => {\r\n     *   console.log('best number', number);\r\n     * });\r\n     * ```\r\n     */\r\n    readonly derive: ReturnType<ApiBase<ApiType>['decorateDerive']>;\r\n    /**\r\n     * @description Contains the parameter types (constants) of all modules.\r\n     *\r\n     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * console.log(api.consts.democracy.enactmentPeriod.toString())\r\n     * ```\r\n     */\r\n    readonly consts: Constants;\r\n    /**\r\n     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.\r\n     *\r\n     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.accountNonce(<accountId>)` (retrieving the associated nonce for an account), takes the `AccountId` as a parameter.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.query.balances.freeBalance(<accountId>, (balance) => {\r\n     *   console.log('new balance', balance);\r\n     * });\r\n     * ```\r\n     */\r\n    readonly query: QueryableStorage<ApiType>;\r\n    /**\r\n     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * const unsub = await api.queryMulti(\r\n     *   [\r\n     *     // you can include the storage without any parameters\r\n     *     api.query.balances.totalIssuance,\r\n     *     // or you can pass parameters to the storage query\r\n     *     [api.query.balances.freeBalance, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']\r\n     *   ],\r\n     *   ([existential, balance]) => {\r\n     *     console.log(`You have ${balance.sub(existential)} more than the existential deposit`);\r\n     *\r\n     *     unsub();\r\n     *   }\r\n     * );\r\n     * ```\r\n     */\r\n    readonly queryMulti: QueryableStorageMulti<ApiType>;\r\n    /**\r\n     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.\r\n     *\r\n     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (usine known keys) and the submission of transactions.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.rpc.chain.subscribeNewHead((header) => {\r\n     *   console.log('new header', header);\r\n     * });\r\n     * ```\r\n     */\r\n    readonly rpc: DecoratedRpc<ApiType, RpcInterface>;\r\n    /**\r\n     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.tx.balances\r\n     *   .transfer(<recipientId>, <balance>)\r\n     *   .signAndSend(<keyPair>, ({status}) => {\r\n     *     console.log('tx status', status.asFinalized.toHex());\r\n     *   });\r\n     * ```\r\n     */\r\n    readonly tx: SubmittableExtrinsics<ApiType>;\r\n    /**\r\n     * @description Disconnect from the underlying provider, halting all comms\r\n     */\r\n    disconnect(): void;\r\n    /**\r\n     * @description Attach an eventemitter handler to listen to a specific event\r\n     *\r\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\r\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.on('connected', (): void => {\r\n     *   console.log('API has been connected to the endpoint');\r\n     * });\r\n     *\r\n     * api.on('disconnected', (): void => {\r\n     *   console.log('API has been disconnected from the endpoint');\r\n     * });\r\n     * ```\r\n     */\r\n    on(type: ApiInterfaceEvents, handler: (...args: any[]) => any): this;\r\n    /**\r\n     * @description Remove the given eventemitter handler\r\n     *\r\n     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\r\n     * @param handler The callback to unregister.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * const handler = (): void => {\r\n     *  console.log('Connected !);\r\n     * };\r\n     *\r\n     * // Start listening\r\n     * api.on('connected', handler);\r\n     *\r\n     * // Stop listening\r\n     * api.off('connected', handler);\r\n     * ```\r\n     */\r\n    off(type: ApiInterfaceEvents, handler: (...args: any[]) => any): this;\r\n    /**\r\n     * @description Attach an one-time eventemitter handler to listen to a specific event\r\n     *\r\n     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\r\n     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\r\n     *\r\n     * @example\r\n     * <BR>\r\n     *\r\n     * ```javascript\r\n     * api.once('connected', (): void => {\r\n     *   console.log('API has been connected to the endpoint');\r\n     * });\r\n     *\r\n     * api.once('disconnected', (): void => {\r\n     *   console.log('API has been disconnected from the endpoint');\r\n     * });\r\n     * ```\r\n     */\r\n    once(type: ApiInterfaceEvents, handler: (...args: any[]) => any): this;\r\n    /**\r\n     * @description Register additional user-defined of chain-specific types in the type registry\r\n     */\r\n    registerTypes(types?: RegistryTypes): void;\r\n    /**\r\n     * This is the one and only method concrete children classes need to implement.\r\n     * It's a higher-order function, which takes one argument\r\n     * `method: Method extends (...args: any[]) => Observable<any>`\r\n     * (and one optional `options`), and should return the user facing method.\r\n     * For example:\r\n     * - For ApiRx, `decorateMethod` should just be identity, because the input\r\n     * function is already an Observable\r\n     * - For ApiPromise, `decorateMethod` should return a function that takes all\r\n     * the parameters from `method`, adds an optional `callback` argument, and\r\n     * returns a Promise.\r\n     *\r\n     * We could easily imagine other user-facing interfaces, which are simply\r\n     * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon\r\n     * via `deocrateMethod`.\r\n     */\r\n    protected abstract decorateMethod(method: (...args: any[]) => Observable<any>, options?: DecorateMethodOptions): any;\r\n    private emit;\r\n    private init;\r\n    private loadMeta;\r\n    private decorateFunctionMeta;\r\n    private decorateRpc;\r\n    private decorateMulti;\r\n    private decorateExtrinsics;\r\n    private decorateExtrinsicEntry;\r\n    private decorateStorage;\r\n    private decorateStorageEntry;\r\n    private decorateStorageEntryLinked;\r\n    private decorateDerive;\r\n}\r\nexport {};\r\n"}}
