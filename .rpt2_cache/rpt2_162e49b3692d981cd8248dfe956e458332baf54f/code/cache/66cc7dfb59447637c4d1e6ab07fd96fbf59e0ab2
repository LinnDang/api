{"code":"// Copyright 2017-2019 @polkadot/api-metadata authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { u8aConcat, u8aToU8a } from '@polkadot/util';\r\nimport { blake2AsU8a, xxhashAsU8a } from '@polkadot/util-crypto';\r\nexport default function getHasher(hasher) {\r\n    // This one is the default for PlainType storage keys\r\n    if (!hasher) {\r\n        return (data) => xxhashAsU8a(data, 128);\r\n    }\r\n    if (hasher.isBlake2128) {\r\n        return (data) => blake2AsU8a(data, 128);\r\n    }\r\n    if (hasher.isBlake2256) {\r\n        return (data) => blake2AsU8a(data, 256);\r\n    }\r\n    if (hasher.isTwox128) {\r\n        return (data) => xxhashAsU8a(data, 128);\r\n    }\r\n    if (hasher.isTwox256) {\r\n        return (data) => xxhashAsU8a(data, 256);\r\n    }\r\n    if (hasher.isTwox64Concat) {\r\n        return (data) => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data));\r\n    }\r\n    // All cases should be handled above, but if not, return Twox128 for\r\n    // backwards-compatbility\r\n    return (data) => xxhashAsU8a(data, 128);\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-metadata/src/storage/fromMetadata/getHasher.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport { StorageHasher } from '@polkadot/types/primitive';\r\ndeclare type HasherInput = string | Buffer | Uint8Array;\r\nexport declare type HasherFunction = (data: HasherInput) => Uint8Array;\r\nexport default function getHasher(hasher?: StorageHasher): HasherFunction;\r\nexport {};\r\n"}}
