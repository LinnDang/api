{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { hexToU8a, isHex, isString, isU8a, u8aToU8a } from '@polkadot/util';\r\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\r\nimport U8aFixed from '../../codec/U8aFixed';\r\n/**\r\n * @name AccountId\r\n * @description\r\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\r\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\r\n * just a Uint8Array wrapper with a fixed length.\r\n */\r\nexport default class AccountId extends U8aFixed {\r\n    constructor(value = new Uint8Array()) {\r\n        super(AccountId.decodeAccountId(value), 256);\r\n    }\r\n    static encode(value) {\r\n        return encodeAddress(value);\r\n    }\r\n    static decodeAccountId(value) {\r\n        if (isU8a(value) || Array.isArray(value)) {\r\n            return u8aToU8a(value);\r\n        }\r\n        else if (isHex(value)) {\r\n            return hexToU8a(value.toString());\r\n        }\r\n        else if (isString(value)) {\r\n            return decodeAddress(value.toString());\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return super.eq(AccountId.decodeAccountId(other));\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        return AccountId.encode(this);\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return 'AccountId';\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8aFixed.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/AccountId.d.ts","writeByteOrderMark":false,"text":"import { AnyU8a } from '../../types';\r\nimport U8aFixed from '../../codec/U8aFixed';\r\n/**\r\n * @name AccountId\r\n * @description\r\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\r\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\r\n * just a Uint8Array wrapper with a fixed length.\r\n */\r\nexport default class AccountId extends U8aFixed {\r\n    constructor(value?: AnyU8a);\r\n    static encode(value: Uint8Array): string;\r\n    private static decodeAccountId;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n}\r\n"}}
