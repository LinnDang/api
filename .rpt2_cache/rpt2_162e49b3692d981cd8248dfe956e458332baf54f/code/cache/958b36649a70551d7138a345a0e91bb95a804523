{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isU8a } from '@polkadot/util';\r\nimport Struct from '../../../codec/Struct';\r\nimport Call from '../../Generic/Call';\r\nimport ExtrinsicSignature from './ExtrinsicSignature';\r\nconst TRANSACTION_VERSION = 2;\r\n/**\r\n * @name ExtrinsicV2\r\n * @description\r\n * The second generation of compact extrinsics\r\n */\r\nexport default class ExtrinsicV2 extends Struct {\r\n    constructor(value, { isSigned } = {}) {\r\n        super({\r\n            signature: ExtrinsicSignature,\r\n            method: Call\r\n        }, ExtrinsicV2.decodeExtrinsic(value, isSigned));\r\n    }\r\n    static decodeExtrinsic(value, isSigned = false) {\r\n        if (!value) {\r\n            return {};\r\n        }\r\n        else if (value instanceof ExtrinsicV2) {\r\n            return value;\r\n        }\r\n        else if (value instanceof Call) {\r\n            return { method: value };\r\n        }\r\n        else if (isU8a(value)) {\r\n            // here we decode manually since we need to pull through the version information\r\n            const signature = new ExtrinsicSignature(value, { isSigned });\r\n            const method = new Call(value.subarray(signature.encodedLength));\r\n            return {\r\n                method,\r\n                signature\r\n            };\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return this.toU8a().length;\r\n    }\r\n    /**\r\n     * @description The [[Call]] this extrinsic wraps\r\n     */\r\n    get method() {\r\n        return this.get('method');\r\n    }\r\n    /**\r\n     * @description The [[ExtrinsicSignature]]\r\n     */\r\n    get signature() {\r\n        return this.get('signature');\r\n    }\r\n    /**\r\n     * @description The version for the signature\r\n     */\r\n    get version() {\r\n        return TRANSACTION_VERSION;\r\n    }\r\n    /**\r\n     * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)\r\n     */\r\n    addSignature(signer, signature, payload) {\r\n        this.signature.addSignature(signer, signature, payload);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sign the extrinsic with a specific keypair\r\n     */\r\n    sign(account, options) {\r\n        this.signature.sign(this.method, account, options);\r\n        return this;\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Generic/Call.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Generic/Address.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/v2/ExtrinsicSignature.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Extrinsic/v2/Extrinsic.d.ts","writeByteOrderMark":false,"text":"import { ExtrinsicPayloadValue, IExtrinsicImpl, IKeyringPair, SignatureOptions } from '../../../types';\r\nimport { ExtrinsicOptions } from '../types';\r\nimport Struct from '../../../codec/Struct';\r\nimport Call from '../../Generic/Call';\r\nimport Address from '../../Generic/Address';\r\nimport ExtrinsicSignature from './ExtrinsicSignature';\r\nexport interface ExtrinsicValueV2 {\r\n    method?: Call;\r\n    signature?: ExtrinsicSignature;\r\n}\r\n/**\r\n * @name ExtrinsicV2\r\n * @description\r\n * The second generation of compact extrinsics\r\n */\r\nexport default class ExtrinsicV2 extends Struct implements IExtrinsicImpl {\r\n    constructor(value?: Uint8Array | ExtrinsicValueV2 | Call, { isSigned }?: ExtrinsicOptions);\r\n    static decodeExtrinsic(value?: Call | Uint8Array | ExtrinsicValueV2, isSigned?: boolean): ExtrinsicValueV2;\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description The [[Call]] this extrinsic wraps\r\n     */\r\n    readonly method: Call;\r\n    /**\r\n     * @description The [[ExtrinsicSignature]]\r\n     */\r\n    readonly signature: ExtrinsicSignature;\r\n    /**\r\n     * @description The version for the signature\r\n     */\r\n    readonly version: number;\r\n    /**\r\n     * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)\r\n     */\r\n    addSignature(signer: Address | Uint8Array | string, signature: Uint8Array | string, payload: ExtrinsicPayloadValue | Uint8Array | string): ExtrinsicV2;\r\n    /**\r\n     * @description Sign the extrinsic with a specific keypair\r\n     */\r\n    sign(account: IKeyringPair, options: SignatureOptions): ExtrinsicV2;\r\n}\r\n"}}
