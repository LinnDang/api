{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport BN from 'bn.js';\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { drr } from '../util/drr';\r\nimport { bestNumber } from '../chain';\r\nconst ZERO = new BN(0);\r\n// internal helper to just split the logic - take all inputs, do the calculations and combine\r\nfunction createDerived0to94([bestNumber, [currentIndex, _lastLengthChange, sessionLength, lastEraLengthChange, sessionsPerEra]]) {\r\n    const lastLengthChange = _lastLengthChange\r\n        ? _lastLengthChange.unwrapOr(ZERO)\r\n        : ZERO;\r\n    const sessionProgress = bestNumber\r\n        .sub(lastLengthChange)\r\n        .add(sessionLength)\r\n        .mod(sessionLength);\r\n    const currentEra = (currentIndex)\r\n        .sub(lastEraLengthChange)\r\n        .mod(sessionsPerEra);\r\n    return {\r\n        currentEra,\r\n        currentIndex,\r\n        eraLength: sessionLength.mul(sessionsPerEra),\r\n        eraProgress: currentEra\r\n            .mul(sessionLength)\r\n            .add(sessionProgress),\r\n        isEpoch: false,\r\n        lastEraLengthChange,\r\n        lastLengthChange,\r\n        sessionLength,\r\n        sessionsPerEra,\r\n        sessionProgress\r\n    };\r\n}\r\nfunction createDerived([[epochDuration, sessionsPerEra], [currentSlot, epochIndex, epochStartSlot, currentIndex, currentEra]]) {\r\n    const sessionProgress = currentSlot.sub(epochStartSlot);\r\n    const eraProgress = epochIndex\r\n        .mod(sessionsPerEra)\r\n        .mul(epochDuration)\r\n        .add(sessionProgress);\r\n    // FIXME This alwasy assumes Babe, as per the substrate defaults - at least for\r\n    // aura the `isEpoch` should be false\r\n    return {\r\n        currentEra,\r\n        currentIndex,\r\n        eraLength: sessionsPerEra.mul(epochDuration),\r\n        eraProgress,\r\n        isEpoch: true,\r\n        lastEraLengthChange: ZERO,\r\n        lastLengthChange: epochStartSlot,\r\n        sessionLength: epochDuration,\r\n        sessionsPerEra,\r\n        sessionProgress: sessionProgress\r\n    };\r\n}\r\n/**\r\n * @description Retrieves all the session and era info and calculates specific values on it as the length of the session and eras\r\n */\r\nexport function info(api) {\r\n    return () => {\r\n        // With substrate `spec_version 94`, the era and session has been explicitly exposed as `parameter_types`.\r\n        // pre-94 we had more info and needed to calculate (handle old/Alex first)\r\n        // https://github.com/paritytech/substrate/commit/dbf322620948935d2bbae214504e6c668c3073ed#diff-c29f42d6b931fa93ba038dbbbfec3055\r\n        return api.query.session.lastLengthChange\r\n            ? combineLatest([\r\n                bestNumber(api)(),\r\n                api.queryMulti([\r\n                    api.query.session.currentIndex,\r\n                    api.query.session.lastLengthChange,\r\n                    api.query.session.sessionLength,\r\n                    api.query.staking.lastEraLengthChange,\r\n                    api.query.staking.sessionsPerEra\r\n                ])\r\n            ]).pipe(map(createDerived0to94), drr())\r\n            : combineLatest([\r\n                // sessionsPerEra:\r\n                // substrate spec_version >= 94 : get from parameter_types exposed as api.consts\r\n                // https://github.com/paritytech/substrate/pull/2802/files#diff-5e5e1c3aec9ddfde0a9054d062ab3db9R156\r\n                of([\r\n                    api.consts.babe.epochDuration,\r\n                    api.consts.staking.sessionsPerEra\r\n                ]),\r\n                api.queryMulti([\r\n                    api.query.babe.currentSlot,\r\n                    api.query.babe.epochIndex,\r\n                    api.query.babe.epochStartSlot,\r\n                    api.query.session.currentIndex,\r\n                    api.query.staking.currentEra\r\n                ])\r\n            ]).pipe(map(createDerived), drr());\r\n    };\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/chain/index.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/session/info.d.ts","writeByteOrderMark":false,"text":"import { DerivedSessionInfo } from '../types';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiInterfaceRx } from '@polkadot/api/types';\r\n/**\r\n * @description Retrieves all the session and era info and calculates specific values on it as the length of the session and eras\r\n */\r\nexport declare function info(api: ApiInterfaceRx): () => Observable<DerivedSessionInfo>;\r\n"}}
