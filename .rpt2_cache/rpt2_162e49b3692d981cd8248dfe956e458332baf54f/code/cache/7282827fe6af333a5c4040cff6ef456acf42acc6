{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert, isU8a, isNumber, isUndefined, stringCamelCase, stringUpperFirst, u8aToHex } from '@polkadot/util';\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\nimport U8a from './U8a';\r\nimport { compareArray } from './utils';\r\n/**\r\n * @name Set\r\n * @description\r\n * An Set is an array of string values, represented an an encoded type by\r\n * a bitwise representation of the values.\r\n */\r\n// FIXME This is a prime candidate to extend the JavaScript built-in Set\r\nexport default class CodecSet extends Set {\r\n    constructor(setValues, value) {\r\n        super(CodecSet.decodeSet(setValues, value));\r\n        this._setValues = setValues;\r\n    }\r\n    static decodeSet(setValues, value = 0) {\r\n        if (isU8a(value)) {\r\n            return value.length === 0\r\n                ? []\r\n                : CodecSet.decodeSet(setValues, value[0]);\r\n        }\r\n        else if (value instanceof Set) {\r\n            return CodecSet.decodeSet(setValues, [...value.values()]);\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            return value.reduce((result, key) => {\r\n                assert(!isUndefined(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);\r\n                result.push(key);\r\n                return result;\r\n            }, []);\r\n        }\r\n        const result = Object.keys(setValues).reduce((result, key) => {\r\n            if ((value & setValues[key]) === setValues[key]) {\r\n                result.push(key);\r\n            }\r\n            return result;\r\n        }, []);\r\n        const computed = CodecSet.encodeSet(setValues, result);\r\n        assert(value === computed, `Set: Mismatch decoding '${value}', computed as '${computed}' with ${result}`);\r\n        return result;\r\n    }\r\n    static encodeSet(setValues, value) {\r\n        return value.reduce((result, value) => {\r\n            return result | (setValues[value] || 0);\r\n        }, 0);\r\n    }\r\n    static with(values) {\r\n        return class extends CodecSet {\r\n            constructor(value) {\r\n                super(values, value);\r\n                Object.keys(values).forEach((_key) => {\r\n                    const name = stringUpperFirst(stringCamelCase(_key));\r\n                    const iskey = `is${name}`;\r\n                    // do not clobber existing properties on the object\r\n                    if (isUndefined(this[iskey])) {\r\n                        Object.defineProperty(this, iskey, {\r\n                            enumerable: true,\r\n                            get: () => this.strings.includes(_key)\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    get hash() {\r\n        return new U8a(blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description true is the Set contains no values\r\n     */\r\n    get isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n    /**\r\n     * @description The actual set values as a string[]\r\n     */\r\n    get strings() {\r\n        return [...super.values()];\r\n    }\r\n    /**\r\n     * @description The encoded value for the set members\r\n     */\r\n    get valueEncoded() {\r\n        return CodecSet.encodeSet(this._setValues, this.strings);\r\n    }\r\n    /**\r\n     * @description adds a value to the Set (extended to allow for validity checking)\r\n     */\r\n    add(key) {\r\n        // we have the isUndefined(this._setValues) in here as well, add is used internally\r\n        // in the Set constructor (so it is undefined at this point, and should allow)\r\n        assert(isUndefined(this._setValues) || !isUndefined(this._setValues[key]), `Set: Invalid key '${key}' on add`);\r\n        super.add(key);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        if (Array.isArray(other)) {\r\n            // we don't actually care about the order, sort the values\r\n            return compareArray(this.strings.sort(), other.sort());\r\n        }\r\n        else if (other instanceof Set) {\r\n            return this.eq([...other.values()]);\r\n        }\r\n        else if (isNumber(other)) {\r\n            return this.valueEncoded === other;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex() {\r\n        return u8aToHex(this.toU8a());\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.strings;\r\n    }\r\n    /**\r\n     * @description The encoded value for the set members\r\n     */\r\n    toNumber() {\r\n        return this.valueEncoded;\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        // FIXME We don't cater for this in createType as of yet\r\n        return JSON.stringify({ _set: this._setValues });\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        return `[${this.strings.join(', ')}]`;\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    toU8a(isBare) {\r\n        return new Uint8Array([this.valueEncoded]);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8a.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/utils/index.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/Set.d.ts","writeByteOrderMark":false,"text":"import { Codec, Constructor, IHash } from '../types';\r\ndeclare type SetValues = Record<string, number>;\r\n/**\r\n * @name Set\r\n * @description\r\n * An Set is an array of string values, represented an an encoded type by\r\n * a bitwise representation of the values.\r\n */\r\nexport default class CodecSet extends Set<string> implements Codec {\r\n    private _setValues;\r\n    constructor(setValues: SetValues, value?: string[] | Set<string> | Uint8Array | number);\r\n    static decodeSet(setValues: SetValues, value?: string[] | Set<string> | Uint8Array | number): string[];\r\n    static encodeSet(setValues: SetValues, value: string[]): number;\r\n    static with(values: SetValues): Constructor<CodecSet>;\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    readonly hash: IHash;\r\n    /**\r\n     * @description true is the Set contains no values\r\n     */\r\n    readonly isEmpty: boolean;\r\n    /**\r\n     * @description The actual set values as a string[]\r\n     */\r\n    readonly strings: string[];\r\n    /**\r\n     * @description The encoded value for the set members\r\n     */\r\n    readonly valueEncoded: number;\r\n    /**\r\n     * @description adds a value to the Set (extended to allow for validity checking)\r\n     */\r\n    add(key: string): this;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(): string;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): string[];\r\n    /**\r\n     * @description The encoded value for the set members\r\n     */\r\n    toNumber(): number;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\nexport {};\r\n"}}
