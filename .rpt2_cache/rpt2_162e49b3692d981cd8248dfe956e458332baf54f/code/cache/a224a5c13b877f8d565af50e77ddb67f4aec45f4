{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HeaderExtended } from '../type';\r\nimport { drr } from '../util/drr';\r\n/**\r\n * @name bestNumberFinalized\r\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\r\n * @returns An array containing the block header and the block author\r\n * @description Get a specific block header and extend it with the author\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\r\n *\r\n * console.log(`block #${number} was authored by ${author}`);\r\n * ```\r\n */\r\nexport function getHeader(api) {\r\n    return (hash) => combineLatest([\r\n        api.rpc.chain.getHeader(hash),\r\n        api.query.session\r\n            ? api.query.session.validators.at(hash)\r\n            : of([])\r\n    ]).pipe(map(([header, validators]) => new HeaderExtended(header, validators)), catchError(() => \r\n    // where rpc.chain.getHeader throws, we will land here - it can happen that\r\n    // we supplied an invalid hash. (Due to defaults, storeage will have an\r\n    // empty value, so only the RPC is affected). So return undefined\r\n    of()), drr());\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/type/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/chain/subscribeNewHead.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/chain/getHeader.d.ts","writeByteOrderMark":false,"text":"import { Observable } from 'rxjs';\r\nimport { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { HeaderExtended } from '../type';\r\n/**\r\n * @name bestNumberFinalized\r\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\r\n * @returns An array containing the block header and the block author\r\n * @description Get a specific block header and extend it with the author\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * const { author, number } = await api.derive.chain.getHeader('0x123...456');\r\n *\r\n * console.log(`block #${number} was authored by ${author}`);\r\n * ```\r\n */\r\nexport declare function getHeader(api: ApiInterfaceRx): (hash: Uint8Array | string) => Observable<HeaderExtended | undefined>;\r\n"}}
