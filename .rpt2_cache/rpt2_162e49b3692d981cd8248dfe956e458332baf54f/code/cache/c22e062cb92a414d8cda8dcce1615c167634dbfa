{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert, isUndefined } from '@polkadot/util';\r\nimport Enum from '../codec/Enum';\r\nimport Struct from '../codec/Struct';\r\nimport MagicNumber from './MagicNumber';\r\nimport MetadataV0 from './v0';\r\nimport MetadataV1 from './v1';\r\nimport MetadataV2 from './v2';\r\nimport MetadataV3 from './v3';\r\nimport MetadataV4 from './v4';\r\nimport MetadataV5 from './v5';\r\nimport MetadataV6 from './v6';\r\nimport MetadataV7 from './v7';\r\nimport v0ToV1 from './v0/toV1';\r\nimport v1ToV2 from './v1/toV2';\r\nimport v2ToV3 from './v2/toV3';\r\nimport v3ToV4 from './v3/toV4';\r\nimport v4ToV5 from './v4/toV5';\r\nimport v5ToV6 from './v5/toV6';\r\nimport v6ToV7 from './v6/toV7';\r\nclass MetadataEnum extends Enum {\r\n    constructor(value) {\r\n        super({\r\n            MetadataV0,\r\n            MetadataV1,\r\n            MetadataV2,\r\n            MetadataV3,\r\n            MetadataV4,\r\n            MetadataV5,\r\n            MetadataV6,\r\n            MetadataV7\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V0 object\r\n     */\r\n    get asV0() {\r\n        assert(this.isV0, `Cannot convert '${this.type}' via asV0`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V1 object\r\n     */\r\n    get asV1() {\r\n        assert(this.isV1, `Cannot convert '${this.type}' via asV1`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V2 object\r\n     */\r\n    get asV2() {\r\n        assert(this.isV2, `Cannot convert '${this.type}' via asV2`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V3 object\r\n     */\r\n    get asV3() {\r\n        assert(this.isV3, `Cannot convert '${this.type}' via asV3`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V4 object\r\n     */\r\n    get asV4() {\r\n        assert(this.isV4, `Cannot convert '${this.type}' via asV4`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V5 object\r\n     */\r\n    get asV5() {\r\n        assert(this.isV5, `Cannot convert '${this.type}' via asV5`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V6 object\r\n     */\r\n    get asV6() {\r\n        assert(this.isV6, `Cannot convert '${this.type}' via asV6`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V7 object\r\n     */\r\n    get asV7() {\r\n        assert(this.isV7, `Cannot convert '${this.type}' via asV7`);\r\n        return this.value;\r\n    }\r\n    /**\r\n     * @description `true` if Deprecated\r\n     */\r\n    get isDeprecated() {\r\n        return this.type === 'MetadataDeprectated';\r\n    }\r\n    /**\r\n     * @description `true` if V0\r\n     */\r\n    get isV0() {\r\n        return this.type === 'MetadataV0';\r\n    }\r\n    /**\r\n     * @description `true` if V1\r\n     */\r\n    get isV1() {\r\n        return this.type === 'MetadataV1';\r\n    }\r\n    /**\r\n     * @description `true` if V2\r\n     */\r\n    get isV2() {\r\n        return this.type === 'MetadataV2';\r\n    }\r\n    /**\r\n     * @description `true` if V3\r\n     */\r\n    get isV3() {\r\n        return this.type === 'MetadataV3';\r\n    }\r\n    /**\r\n     * @description `true` if V4\r\n     */\r\n    get isV4() {\r\n        return this.type === 'MetadataV4';\r\n    }\r\n    /**\r\n     * @description `true` if V5\r\n     */\r\n    get isV5() {\r\n        return this.type === 'MetadataV5';\r\n    }\r\n    /**\r\n     * @description `true` if V6\r\n     */\r\n    get isV6() {\r\n        return this.type === 'MetadataV6';\r\n    }\r\n    /**\r\n     * @description `true` if V7\r\n     */\r\n    get isV7() {\r\n        return this.type === 'MetadataV7';\r\n    }\r\n    /**\r\n     * @description The version this metadata represents\r\n     */\r\n    get version() {\r\n        return this.index;\r\n    }\r\n}\r\n/**\r\n * @name MetadataVersioned\r\n * @description\r\n * The versioned runtime metadata as a decoded structure\r\n */\r\nexport default class MetadataVersioned extends Struct {\r\n    constructor(value) {\r\n        super({\r\n            magicNumber: MagicNumber,\r\n            metadata: MetadataEnum\r\n        }, value);\r\n    }\r\n    /**\r\n     * @description\r\n     */\r\n    get magicNumber() {\r\n        return this.get('magicNumber');\r\n    }\r\n    /**\r\n     * @description the metadata wrapped\r\n     */\r\n    get metadata() {\r\n        return this.get('metadata');\r\n    }\r\n    /**\r\n     * @description the metadata version this structure represents\r\n     */\r\n    get version() {\r\n        return this.metadata.index;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped metadata as a V0 object\r\n     */\r\n    get asV0() {\r\n        assert(this.metadata.version === 0, `Cannot convert metadata from v${this.metadata.version} to v0`);\r\n        return this.metadata.asV0;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V1 object\r\n     */\r\n    get asV1() {\r\n        assert(this.metadata.version <= 1, `Cannot convert metadata from v${this.metadata.version} to v1`);\r\n        if (this.metadata.version === 1) {\r\n            return this.metadata.asV1;\r\n        }\r\n        if (isUndefined(this._convertedV1)) {\r\n            this._convertedV1 = v0ToV1(this.asV0);\r\n        }\r\n        return this._convertedV1;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V2 object\r\n     */\r\n    get asV2() {\r\n        assert(this.metadata.version <= 2, `Cannot convert metadata from v${this.metadata.version} to v2`);\r\n        if (this.metadata.version === 2) {\r\n            return this.metadata.asV2;\r\n        }\r\n        if (isUndefined(this._convertedV2)) {\r\n            this._convertedV2 = v1ToV2(this.asV1);\r\n        }\r\n        return this._convertedV2;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V3 object\r\n     */\r\n    get asV3() {\r\n        assert(this.metadata.version <= 3, `Cannot convert metadata from v${this.metadata.version} to v3`);\r\n        if (this.metadata.version === 3) {\r\n            return this.metadata.asV3;\r\n        }\r\n        if (isUndefined(this._convertedV3)) {\r\n            this._convertedV3 = v2ToV3(this.asV2);\r\n        }\r\n        return this._convertedV3;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V4 object\r\n     */\r\n    get asV4() {\r\n        assert(this.metadata.version <= 4, `Cannot convert metadata from v${this.metadata.version} to v4`);\r\n        if (this.metadata.version === 4) {\r\n            return this.metadata.asV4;\r\n        }\r\n        if (isUndefined(this._convertedV4)) {\r\n            this._convertedV4 = v3ToV4(this.asV3);\r\n        }\r\n        return this._convertedV4;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V5 object\r\n     */\r\n    get asV5() {\r\n        assert(this.metadata.version <= 5, `Cannot convert metadata from v${this.metadata.version} to v5`);\r\n        if (this.metadata.version === 5) {\r\n            return this.metadata.asV5;\r\n        }\r\n        if (isUndefined(this._convertedV5)) {\r\n            this._convertedV5 = v4ToV5(this.asV4);\r\n        }\r\n        return this._convertedV5;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V6 object\r\n     */\r\n    get asV6() {\r\n        assert(this.metadata.version <= 6, `Cannot convert metadata from v${this.metadata.version} to v6`);\r\n        if (this.metadata.version === 6) {\r\n            return this.metadata.asV6;\r\n        }\r\n        if (isUndefined(this._convertedV6)) {\r\n            this._convertedV6 = v5ToV6(this.asV5);\r\n        }\r\n        return this._convertedV6;\r\n    }\r\n    /**\r\n     * @description Returns the wrapped values as a V7 object\r\n     */\r\n    get asV7() {\r\n        assert(this.metadata.version <= 7, `Cannot convert metadata from v${this.metadata.version} to v7`);\r\n        if (this.metadata.version === 7) {\r\n            return this.metadata.asV7;\r\n        }\r\n        if (isUndefined(this._convertedV7)) {\r\n            this._convertedV7 = v6ToV7(this.asV6);\r\n        }\r\n        return this._convertedV7;\r\n    }\r\n    getUniqTypes(throwError) {\r\n        return this.asV7.getUniqTypes(throwError);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Enum.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Struct.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/MagicNumber.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v0/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v1/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v2/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v3/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v4/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v5/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v6/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v7/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v0/toV1.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v1/toV2.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v2/toV3.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v3/toV4.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v4/toV5.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v5/toV6.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v6/toV7.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/Metadata/MetadataVersioned.d.ts","writeByteOrderMark":false,"text":"import Struct from '../codec/Struct';\r\nimport MagicNumber from './MagicNumber';\r\nimport MetadataV0 from './v0';\r\nimport MetadataV1 from './v1';\r\nimport MetadataV2 from './v2';\r\nimport MetadataV3 from './v3';\r\nimport MetadataV4 from './v4';\r\nimport MetadataV5 from './v5';\r\nimport MetadataV6 from './v6';\r\nimport MetadataV7 from './v7';\r\n/**\r\n * @name MetadataVersioned\r\n * @description\r\n * The versioned runtime metadata as a decoded structure\r\n */\r\nexport default class MetadataVersioned extends Struct {\r\n    private _convertedV1?;\r\n    private _convertedV2?;\r\n    private _convertedV3?;\r\n    private _convertedV4?;\r\n    private _convertedV5?;\r\n    private _convertedV6?;\r\n    private _convertedV7?;\r\n    constructor(value?: any);\r\n    /**\r\n     * @description\r\n     */\r\n    readonly magicNumber: MagicNumber;\r\n    /**\r\n     * @description the metadata wrapped\r\n     */\r\n    private readonly metadata;\r\n    /**\r\n     * @description the metadata version this structure represents\r\n     */\r\n    readonly version: number;\r\n    /**\r\n     * @description Returns the wrapped metadata as a V0 object\r\n     */\r\n    readonly asV0: MetadataV0;\r\n    /**\r\n     * @description Returns the wrapped values as a V1 object\r\n     */\r\n    readonly asV1: MetadataV1;\r\n    /**\r\n     * @description Returns the wrapped values as a V2 object\r\n     */\r\n    readonly asV2: MetadataV2;\r\n    /**\r\n     * @description Returns the wrapped values as a V3 object\r\n     */\r\n    readonly asV3: MetadataV3;\r\n    /**\r\n     * @description Returns the wrapped values as a V4 object\r\n     */\r\n    readonly asV4: MetadataV4;\r\n    /**\r\n     * @description Returns the wrapped values as a V5 object\r\n     */\r\n    readonly asV5: MetadataV5;\r\n    /**\r\n     * @description Returns the wrapped values as a V6 object\r\n     */\r\n    readonly asV6: MetadataV6;\r\n    /**\r\n     * @description Returns the wrapped values as a V7 object\r\n     */\r\n    readonly asV7: MetadataV7;\r\n    getUniqTypes(throwError: boolean): string[];\r\n}\r\n"}}
