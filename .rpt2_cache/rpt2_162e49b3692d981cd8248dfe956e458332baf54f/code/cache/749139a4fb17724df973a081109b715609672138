{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport BN from 'bn.js';\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { drr } from '../util/drr';\r\nconst ZERO = new BN(0);\r\n/**\r\n * @name fees\r\n * @returns An object containing the combined results of the queries for\r\n * all relevant contract fees as declared in the substrate chain spec.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\r\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\r\n * });\r\n * ```\r\n */\r\nexport function fees(api) {\r\n    return () => {\r\n        const queryBase = api.query.contracts || api.query.contract;\r\n        if (api.query.contract && !api.query.contract.rentByteFee) {\r\n            // Only for 1.0 support. rentByteFee, rentDepositOffset, tombstoneDeposit are not available in substrate 1.0.\r\n            // @TODO remove this once 1.0 support is dropped\r\n            return combineLatest([\r\n                of([ZERO, ZERO, ZERO]),\r\n                api.queryMulti([\r\n                    queryBase.callBaseFee,\r\n                    queryBase.contractFee,\r\n                    queryBase.createBaseFee,\r\n                    queryBase.creationFee,\r\n                    queryBase.transactionBaseFee,\r\n                    queryBase.transactionByteFee,\r\n                    queryBase.transferFee\r\n                ])\r\n            ]).pipe(map(([[rentByteFee, rentDepositOffset, tombstoneDeposit], [callBaseFee, contractFee, createBaseFee, creationFee, transactionBaseFee, transactionByteFee, transferFee]]) => ({\r\n                callBaseFee,\r\n                contractFee,\r\n                createBaseFee,\r\n                creationFee,\r\n                rentByteFee,\r\n                rentDepositOffset,\r\n                tombstoneDeposit,\r\n                transactionBaseFee,\r\n                transactionByteFee,\r\n                transferFee\r\n            })), drr());\r\n        }\r\n        return (api.consts.contracts\r\n            // get values from api.const for substrate versions post spec_version: 101\r\n            // https://github.com/paritytech/substrate/pull/2883/files#diff-5e5e1c3aec9ddfde0a9054d062ab3db9R131\r\n            ? of([\r\n                api.consts.contracts.callBaseFee,\r\n                api.consts.contracts.contractFee,\r\n                api.consts.contracts.createBaseFee,\r\n                api.consts.contracts.creationFee,\r\n                api.consts.contracts.rentByteFee,\r\n                api.consts.contracts.rentDepositOffset,\r\n                api.consts.contracts.tombstoneDeposit,\r\n                api.consts.contracts.transactionBaseFee,\r\n                api.consts.contracts.transactionByteFee,\r\n                api.consts.contracts.transferFee\r\n            ])\r\n            // Support versions pre spec_version 101 and get values from storage\r\n            : api.queryMulti([\r\n                queryBase.callBaseFee,\r\n                queryBase.contractFee,\r\n                queryBase.createBaseFee,\r\n                queryBase.creationFee,\r\n                queryBase.rentByteFee,\r\n                queryBase.rentDepositOffset,\r\n                queryBase.tombstoneDeposit,\r\n                queryBase.transactionBaseFee,\r\n                queryBase.transactionByteFee,\r\n                queryBase.transferFee\r\n            ])).pipe(map(([callBaseFee, contractFee, createBaseFee, creationFee, rentByteFee, rentDepositOffset, tombstoneDeposit, transactionBaseFee, transactionByteFee, transferFee]) => ({\r\n            callBaseFee,\r\n            contractFee,\r\n            createBaseFee,\r\n            creationFee,\r\n            rentByteFee,\r\n            rentDepositOffset,\r\n            tombstoneDeposit,\r\n            transactionBaseFee,\r\n            transactionByteFee,\r\n            transferFee\r\n        })), drr());\r\n    };\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/contracts/fees.d.ts","writeByteOrderMark":false,"text":"import { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { DerivedContractFees } from '../types';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * @name fees\r\n * @returns An object containing the combined results of the queries for\r\n * all relevant contract fees as declared in the substrate chain spec.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\r\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\r\n * });\r\n * ```\r\n */\r\nexport declare function fees(api: ApiInterfaceRx): () => Observable<DerivedContractFees>;\r\n"}}
