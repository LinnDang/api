{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert, isU8a, u8aConcat, compactToU8a } from '@polkadot/util';\r\nimport AbstractArray from './AbstractArray';\r\nimport { typeToConstructor } from './utils';\r\nimport Vec from './Vec';\r\n/**\r\n * @name VecFixed\r\n * @description\r\n * This manages codec arrays of a fixed length\r\n */\r\nexport default class VecFixed extends AbstractArray {\r\n    constructor(Type, length, value = []) {\r\n        const Clazz = typeToConstructor(Type);\r\n        super(...VecFixed.decodeVecFixed(Clazz, length, value));\r\n        this._Type = Clazz;\r\n    }\r\n    static decodeVecFixed(Type, allocLength, value) {\r\n        const values = Vec.decodeVec(Type, isU8a(value)\r\n            ? u8aConcat(compactToU8a(allocLength), value)\r\n            : value);\r\n        while (values.length < allocLength) {\r\n            values.push(new Type());\r\n        }\r\n        assert(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);\r\n        return values;\r\n    }\r\n    static with(Type, length) {\r\n        return class extends VecFixed {\r\n            constructor(value) {\r\n                super(Type, length, value);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @description The type for the items\r\n     */\r\n    get Type() {\r\n        return this._Type.name;\r\n    }\r\n    toU8a() {\r\n        return super.toU8a(true);\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return `[${new this._Type().toRawType()};${this.length}`;\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/AbstractArray.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/utils/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Vec.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/VecFixed.d.ts","writeByteOrderMark":false,"text":"import { Codec, Constructor, InterfaceTypes } from '../types';\r\nimport AbstractArray from './AbstractArray';\r\n/**\r\n * @name VecFixed\r\n * @description\r\n * This manages codec arrays of a fixed length\r\n */\r\nexport default class VecFixed<T extends Codec> extends AbstractArray<T> {\r\n    private _Type;\r\n    constructor(Type: Constructor<T> | InterfaceTypes, length: number, value?: VecFixed<any> | Uint8Array | string | any[]);\r\n    static decodeVecFixed<T extends Codec>(Type: Constructor<T>, allocLength: number, value: VecFixed<any> | Uint8Array | string | any[]): T[];\r\n    static with<O extends Codec>(Type: Constructor<O>, length: number): Constructor<VecFixed<O>>;\r\n    /**\r\n     * @description The type for the items\r\n     */\r\n    readonly Type: string;\r\n    toU8a(): Uint8Array;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n}\r\n"}}
