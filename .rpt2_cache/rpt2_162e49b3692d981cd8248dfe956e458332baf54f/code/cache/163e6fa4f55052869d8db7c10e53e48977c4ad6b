{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { ClassOf, Option, createType } from '@polkadot/types';\r\nimport { bnMax } from '@polkadot/util';\r\nimport { idAndIndex } from '../accounts/idAndIndex';\r\nimport { bestNumber } from '../chain/bestNumber';\r\nimport { drr } from '../util/drr';\r\nfunction calcBalances([accountId = createType('AccountId'), bestNumber = createType('Balance'), [freeBalance = createType('Balance'), reservedBalance = createType('Balance'), locks = [], vesting = new Option(ClassOf('VestingSchedule'), null), accountNonce = createType('Balance')]]) {\r\n    let lockedBalance = createType('Balance');\r\n    if (Array.isArray(locks)) {\r\n        // only get the locks that are valid until passed the current block\r\n        const totals = locks.filter((value) => bestNumber && value.until.gt(bestNumber));\r\n        // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\r\n        lockedBalance = totals[0]\r\n            ? bnMax(...totals.map(({ amount }) => amount))\r\n            : createType('Balance');\r\n    }\r\n    // offset = balance locked at genesis, perBlock is the unlock amount\r\n    const { offset, perBlock } = vesting.unwrapOr(createType('VestingSchedule'));\r\n    const vestedNow = perBlock.mul(bestNumber);\r\n    const vestedBalance = vestedNow.gt(offset)\r\n        ? freeBalance\r\n        : freeBalance.sub(offset).add(vestedNow);\r\n    // NOTE Workaround for this account on Alex (one of a couple reported) -\r\n    //   5F7BJL6Z4m8RLtK7nXEqqpEqhBbd535Z3CZeYF6ccvaQAY6N\r\n    // The locked is > the vested and ended up with the locked > free,\r\n    // i.e. related to https://github.com/paritytech/polkadot/issues/225\r\n    // (most probably due to movements from stash -> controller -> free)\r\n    const availableBalance = bnMax(createType('Balance'), vestedBalance.sub(lockedBalance));\r\n    return {\r\n        accountId,\r\n        accountNonce,\r\n        availableBalance,\r\n        freeBalance,\r\n        lockedBalance,\r\n        reservedBalance,\r\n        vestedBalance,\r\n        votingBalance: freeBalance.add(reservedBalance)\r\n    };\r\n}\r\n/**\r\n * @name all\r\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\r\n * @returns An object containing the combined results of the storage queries for\r\n * all relevant fees as declared in the substrate chain spec.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * const ALICE = 'F7Hs';\r\n *\r\n * api.derive.balances.all(ALICE, ([accountId, lockedBalance]) => {\r\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\r\n * });\r\n * ```\r\n */\r\nexport function all(api) {\r\n    return (address) => {\r\n        return idAndIndex(api)(address).pipe(switchMap(([accountId]) => (accountId\r\n            ? combineLatest([\r\n                of(accountId),\r\n                bestNumber(api)(),\r\n                api.queryMulti([\r\n                    [api.query.balances.freeBalance, accountId],\r\n                    [api.query.balances.reservedBalance, accountId],\r\n                    [api.query.balances.locks, accountId],\r\n                    [api.query.balances.vesting, accountId],\r\n                    [api.query.system.accountNonce, accountId]\r\n                ])\r\n            ])\r\n            : of([undefined, undefined, [undefined, undefined, undefined, undefined, undefined]]))), map(calcBalances), drr());\r\n    };\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/accounts/idAndIndex.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/chain/bestNumber.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/balances/all.d.ts","writeByteOrderMark":false,"text":"import { AccountId, AccountIndex, Address } from '@polkadot/types/interfaces';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { DerivedBalances } from '../types';\r\n/**\r\n * @name all\r\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\r\n * @returns An object containing the combined results of the storage queries for\r\n * all relevant fees as declared in the substrate chain spec.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * const ALICE = 'F7Hs';\r\n *\r\n * api.derive.balances.all(ALICE, ([accountId, lockedBalance]) => {\r\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\r\n * });\r\n * ```\r\n */\r\nexport declare function all(api: ApiInterfaceRx): (address: AccountIndex | AccountId | Address | string) => Observable<DerivedBalances>;\r\n"}}
