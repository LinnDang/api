{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isBoolean, isNumber, isObject, isU8a, isUndefined } from '@polkadot/util';\r\nimport createType from '../../codec/createType';\r\nimport U8aFixed from '../../codec/U8aFixed';\r\nimport Bool from '../Bool';\r\n// For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction\r\nconst AYE_BITS = 0b10000000;\r\nconst NAY_BITS = 0b00000000;\r\nconst CON_MASK = 0b01111111;\r\nconst DEF_CONV = 0b00000000; // the default conviction, None\r\n/**\r\n * @name Vote\r\n * @description\r\n * A number of lock periods, plus a vote, one way or the other.\r\n */\r\nexport default class Vote extends U8aFixed {\r\n    constructor(value) {\r\n        // decoded is just 1 byte\r\n        // Aye: Most Significant Bit\r\n        // Conviction: 0000 - 0101\r\n        const decoded = Vote.decodeVote(value);\r\n        super(decoded, 8);\r\n        this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;\r\n        this._conviction = createType('Conviction', decoded[0] & CON_MASK);\r\n    }\r\n    static decodeVote(value) {\r\n        if (isUndefined(value)) {\r\n            return new Uint8Array([NAY_BITS]);\r\n        }\r\n        else if (isBoolean(value)) {\r\n            return value\r\n                ? new Uint8Array([AYE_BITS | DEF_CONV])\r\n                : new Uint8Array([NAY_BITS]);\r\n        }\r\n        else if (value instanceof Boolean) {\r\n            return Vote.decodeVote(value.valueOf());\r\n        }\r\n        else if (isNumber(value)) {\r\n            return value < 0\r\n                ? new Uint8Array([AYE_BITS | DEF_CONV])\r\n                : new Uint8Array([NAY_BITS]);\r\n        }\r\n        else if (isU8a(value)) {\r\n            return value.length\r\n                ? value.subarray(0, 1)\r\n                : new Uint8Array([NAY_BITS]);\r\n        }\r\n        else if (isObject(value)) {\r\n            const vote = new Bool(value.aye).eq(true) ? AYE_BITS : NAY_BITS;\r\n            const conviction = createType('Conviction', isUndefined(value.conviction) ? DEF_CONV : value.conviction);\r\n            return new Uint8Array([vote | conviction.index]);\r\n        }\r\n        throw new Error(`Unable to convert input ${value} to Vote`);\r\n    }\r\n    /**\r\n     * @description returns a V2 conviction\r\n     */\r\n    get conviction() {\r\n        return this._conviction;\r\n    }\r\n    /**\r\n     * @description true if the wrapped value is a positive vote\r\n     */\r\n    get isAye() {\r\n        return this._aye;\r\n    }\r\n    /**\r\n     * @description true if the wrapped value is a negative vote\r\n     */\r\n    get isNay() {\r\n        return !this.isAye;\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return 'Vote';\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/democracy/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8aFixed.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Bool.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/Vote.d.ts","writeByteOrderMark":false,"text":"import { Conviction } from '../../interfaces/democracy';\r\nimport U8aFixed from '../../codec/U8aFixed';\r\n/**\r\n * @name Vote\r\n * @description\r\n * A number of lock periods, plus a vote, one way or the other.\r\n */\r\nexport default class Vote extends U8aFixed {\r\n    private _aye;\r\n    private _conviction;\r\n    constructor(value?: any);\r\n    private static decodeVote;\r\n    /**\r\n     * @description returns a V2 conviction\r\n     */\r\n    readonly conviction: Conviction;\r\n    /**\r\n     * @description true if the wrapped value is a positive vote\r\n     */\r\n    readonly isAye: boolean;\r\n    /**\r\n     * @description true if the wrapped value is a negative vote\r\n     */\r\n    readonly isNay: boolean;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n}\r\n"}}
