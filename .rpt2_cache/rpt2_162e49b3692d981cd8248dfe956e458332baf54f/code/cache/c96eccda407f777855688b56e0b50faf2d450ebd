{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { assert, isFunction, isString, isU8a } from '@polkadot/util';\r\nimport Bytes from './Bytes';\r\n/**\r\n * @name StorageKey\r\n * @description\r\n * A representation of a storage key (typically hashed) in the system. It can be\r\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\r\n */\r\nexport default class StorageKey extends Bytes {\r\n    constructor(value, override = {}) {\r\n        const { key, method, section } = StorageKey.decodeStorageKey(value);\r\n        super(key);\r\n        this._meta = StorageKey.getMeta(value);\r\n        this._method = override.method || method;\r\n        this._outputType = StorageKey.getType(value);\r\n        this._section = override.section || section;\r\n    }\r\n    static decodeStorageKey(value) {\r\n        if (value instanceof StorageKey) {\r\n            return {\r\n                key: value,\r\n                method: value.method,\r\n                section: value.section\r\n            };\r\n        }\r\n        else if (!value || isString(value) || isU8a(value)) {\r\n            // let Bytes handle these inputs\r\n            return { key: value };\r\n        }\r\n        else if (isFunction(value)) {\r\n            return {\r\n                key: value(),\r\n                method: value.method,\r\n                section: value.section\r\n            };\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            const [fn, ...arg] = value;\r\n            assert(isFunction(fn), 'Expected function input for key construction');\r\n            return {\r\n                key: fn(...arg),\r\n                method: fn.method,\r\n                section: fn.section\r\n            };\r\n        }\r\n        throw new Error(`Unable to convert input ${value} to StorageKey`);\r\n    }\r\n    static getMeta(value) {\r\n        if (value instanceof StorageKey) {\r\n            return value.meta;\r\n        }\r\n        else if (isFunction(value)) {\r\n            return value.meta;\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            const [fn] = value;\r\n            return fn.meta;\r\n        }\r\n        return undefined;\r\n    }\r\n    static getType(value) {\r\n        if (value instanceof StorageKey) {\r\n            return value.outputType;\r\n        }\r\n        else if (isFunction(value)) {\r\n            return value.meta.type.toString();\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            const [fn] = value;\r\n            return fn.meta.type.toString();\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * @description The metadata or `undefined` when not available\r\n     */\r\n    get meta() {\r\n        return this._meta;\r\n    }\r\n    /**\r\n     * @description The key method or `undefined` when not specified\r\n     */\r\n    get method() {\r\n        return this._method;\r\n    }\r\n    /**\r\n     * @description The output type, `null` when not available\r\n     */\r\n    get outputType() {\r\n        return this._outputType;\r\n    }\r\n    /**\r\n     * @description The key section or `undefined` when not specified\r\n     */\r\n    get section() {\r\n        return this._section;\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/v7/Storage.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Bytes.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/StorageKey.d.ts","writeByteOrderMark":false,"text":"import { StorageEntryMetadata as MetaV7 } from '../Metadata/v7/Storage';\r\nimport { AnyU8a } from '../types';\r\nimport Bytes from './Bytes';\r\nexport interface StorageEntry {\r\n    (arg?: any): Uint8Array;\r\n    headKey?: Uint8Array;\r\n    meta: MetaV7;\r\n    method: string;\r\n    prefix: string;\r\n    section: string;\r\n    toJSON: () => any;\r\n}\r\ninterface Decoded {\r\n    key?: Uint8Array | string;\r\n    method?: string;\r\n    section?: string;\r\n}\r\ninterface StorageKeyExtra {\r\n    method: string;\r\n    section: string;\r\n}\r\n/**\r\n * @name StorageKey\r\n * @description\r\n * A representation of a storage key (typically hashed) in the system. It can be\r\n * constructed by passing in a raw key or a StorageEntry with (optional) arguments.\r\n */\r\nexport default class StorageKey extends Bytes {\r\n    private _meta?;\r\n    private _method?;\r\n    private _outputType?;\r\n    private _section?;\r\n    constructor(value?: AnyU8a | StorageKey | StorageEntry | [StorageEntry, any], override?: Partial<StorageKeyExtra>);\r\n    static decodeStorageKey(value?: AnyU8a | StorageKey | StorageEntry | [StorageEntry, any]): Decoded;\r\n    static getMeta(value: StorageKey | StorageEntry | [StorageEntry, any]): MetaV7 | undefined;\r\n    static getType(value: StorageKey | StorageEntry | [StorageEntry, any]): string | undefined;\r\n    /**\r\n     * @description The metadata or `undefined` when not available\r\n     */\r\n    readonly meta: MetaV7 | undefined;\r\n    /**\r\n     * @description The key method or `undefined` when not specified\r\n     */\r\n    readonly method: string | undefined;\r\n    /**\r\n     * @description The output type, `null` when not available\r\n     */\r\n    readonly outputType: string | undefined;\r\n    /**\r\n     * @description The key section or `undefined` when not specified\r\n     */\r\n    readonly section: string | undefined;\r\n}\r\nexport {};\r\n"}}
