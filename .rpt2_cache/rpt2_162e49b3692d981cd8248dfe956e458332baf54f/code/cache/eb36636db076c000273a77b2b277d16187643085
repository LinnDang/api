{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { bnToBn } from '@polkadot/util';\r\nimport createType from '../../codec/createType';\r\nimport U32 from '../U32';\r\nconst CID_ABRS = 0x53524241; // 'ABRS'\r\nconst CID_AURA = 0x61727561; // 'aura'\r\nconst CID_BABE = 0x45424142; // 'BABE'\r\nconst CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)\r\nexport { CID_ABRS, CID_AURA, CID_BABE, CID_GRPA };\r\n/**\r\n * @name ConsensusEngineId\r\n * @description\r\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\r\n */\r\nexport default class ConsensusEngineId extends U32 {\r\n    static idToString(input) {\r\n        return bnToBn(input)\r\n            .toArray('le')\r\n            .map((code) => String.fromCharCode(code))\r\n            .join('');\r\n    }\r\n    static stringToId(input) {\r\n        return input\r\n            .split('')\r\n            .reverse()\r\n            .reduce((result, char) => (result * 256) + char.charCodeAt(0), 0);\r\n    }\r\n    /**\r\n     * @description `true` if the engine matches abrs\r\n     */\r\n    get isAbrs() {\r\n        return this.eq(CID_ABRS);\r\n    }\r\n    /**\r\n     * @description `true` if the engine matches aura\r\n     */\r\n    get isAura() {\r\n        return this.eq(CID_AURA);\r\n    }\r\n    /**\r\n     * @description `true` is the engine matches babe\r\n     */\r\n    get isBabe() {\r\n        return this.eq(CID_BABE);\r\n    }\r\n    /**\r\n     * @description `true` is the engine matches grandpa\r\n     */\r\n    get isGrandpa() {\r\n        return this.eq(CID_GRPA);\r\n    }\r\n    getAbrsAuthor(bytes, sessionValidators) {\r\n        const pre = createType('RawAuraBorosPreDigest', bytes.toU8a(true));\r\n        return sessionValidators[pre.isBabe\r\n            ? pre.asBabe.authorityIndex.toNumber()\r\n            : pre.asAura.slotNumber.modn(sessionValidators.length)];\r\n    }\r\n    getAuraAuthor(bytes, sessionValidators) {\r\n        return sessionValidators[createType('RawAuraPreDigest', bytes.toU8a(true))\r\n            .slotNumber\r\n            .modn(sessionValidators.length)];\r\n    }\r\n    getBabeAuthor(bytes, sessionValidators) {\r\n        return sessionValidators[createType('RawBabePreDigest', bytes.toU8a(true))\r\n            .authorityIndex\r\n            .toNumber()];\r\n    }\r\n    /**\r\n     * @description From the input bytes, decode into an author\r\n     */\r\n    extractAuthor(bytes, sessionValidators) {\r\n        if (this.isAbrs) {\r\n            return this.getAbrsAuthor(bytes, sessionValidators);\r\n        }\r\n        else if (this.isAura) {\r\n            return this.getAuraAuthor(bytes, sessionValidators);\r\n        }\r\n        else if (this.isBabe) {\r\n            return this.getBabeAuthor(bytes, sessionValidators);\r\n        }\r\n        throw new Error('Invalid engine for extractAuthor conversion');\r\n    }\r\n    /**\r\n     * @description Override the default toString to return a 4-byte string\r\n     */\r\n    toString() {\r\n        return ConsensusEngineId.idToString(this);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/runtime/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@types/bn.js/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Bytes.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/U32.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Generic/ConsensusEngineId.d.ts","writeByteOrderMark":false,"text":"import { AccountId } from '../../interfaces/runtime';\r\nimport BN from 'bn.js';\r\nimport Bytes from '../Bytes';\r\nimport U32 from '../U32';\r\ndeclare const CID_ABRS = 1397899841;\r\ndeclare const CID_AURA = 1634891105;\r\ndeclare const CID_BABE = 1161969986;\r\ndeclare const CID_GRPA = 1263424070;\r\nexport { CID_ABRS, CID_AURA, CID_BABE, CID_GRPA };\r\n/**\r\n * @name ConsensusEngineId\r\n * @description\r\n * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']\r\n */\r\nexport default class ConsensusEngineId extends U32 {\r\n    static idToString(input: number | BN): string;\r\n    static stringToId(input: string): number;\r\n    /**\r\n     * @description `true` if the engine matches abrs\r\n     */\r\n    readonly isAbrs: boolean;\r\n    /**\r\n     * @description `true` if the engine matches aura\r\n     */\r\n    readonly isAura: boolean;\r\n    /**\r\n     * @description `true` is the engine matches babe\r\n     */\r\n    readonly isBabe: boolean;\r\n    /**\r\n     * @description `true` is the engine matches grandpa\r\n     */\r\n    readonly isGrandpa: boolean;\r\n    private getAbrsAuthor;\r\n    private getAuraAuthor;\r\n    private getBabeAuthor;\r\n    /**\r\n     * @description From the input bytes, decode into an author\r\n     */\r\n    extractAuthor(bytes: Bytes, sessionValidators: AccountId[]): AccountId;\r\n    /**\r\n     * @description Override the default toString to return a 4-byte string\r\n     */\r\n    toString(): string;\r\n}\r\n"}}
