{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isString, isU8a, u8aToU8a } from '@polkadot/util';\r\nimport U8a from './U8a';\r\n/**\r\n * @name U8aFixed\r\n * @description\r\n * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant\r\n * to be used directly, rather is should be subclassed with the specific lengths.\r\n */\r\nexport default class U8aFixed extends U8a {\r\n    constructor(value = new Uint8Array(), bitLength = 256) {\r\n        super(U8aFixed.decodeU8aFixed(value, bitLength));\r\n    }\r\n    static decodeU8aFixed(value, bitLength = 256) {\r\n        if (isU8a(value)) {\r\n            // ensure that we have an actual u8a with the full length as specified by\r\n            // the bitLength input (padded with zeros as required)\r\n            const byteLength = bitLength / 8;\r\n            const sub = value.subarray(0, byteLength);\r\n            if (sub.length === byteLength) {\r\n                return sub;\r\n            }\r\n            const u8a = new Uint8Array(byteLength);\r\n            u8a.set(sub, 0);\r\n            return u8a;\r\n        }\r\n        else if (Array.isArray(value) || isString(value)) {\r\n            return U8aFixed.decodeU8aFixed(u8aToU8a(value), bitLength);\r\n        }\r\n        return value;\r\n    }\r\n    static with(bitLength) {\r\n        return class extends U8aFixed {\r\n            constructor(value) {\r\n                super(value, bitLength);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return `[u8;${this.length}]`;\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8a.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/U8aFixed.d.ts","writeByteOrderMark":false,"text":"import { AnyU8a, Constructor } from '../types';\r\nimport U8a from './U8a';\r\nexport declare type BitLength = 8 | 16 | 32 | 64 | 128 | 160 | 256 | 512 | 1024 | 2048;\r\n/**\r\n * @name U8aFixed\r\n * @description\r\n * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant\r\n * to be used directly, rather is should be subclassed with the specific lengths.\r\n */\r\nexport default class U8aFixed extends U8a {\r\n    constructor(value?: AnyU8a, bitLength?: BitLength);\r\n    private static decodeU8aFixed;\r\n    static with(bitLength: BitLength): Constructor<U8aFixed>;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n}\r\n"}}
