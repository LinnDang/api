{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isU8a, isUndefined, u8aToHex, u8aToU8a } from '@polkadot/util';\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\n/**\r\n * @name U8a\r\n * @description\r\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\r\n * from other implementations where it will consume the full Uint8Array as passed to it.\r\n * As such it is meant to be subclassed where the wrapper takes care of the\r\n * actual lengths instead of used directly.\r\n * @noInheritDoc\r\n */\r\nexport default class U8a extends Uint8Array {\r\n    constructor(value) {\r\n        super(U8a.decodeU8a(value));\r\n    }\r\n    static decodeU8a(value) {\r\n        if (isU8a(value)) {\r\n            return value;\r\n        }\r\n        return u8aToU8a(value);\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return this.length;\r\n    }\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    get hash() {\r\n        return new U8a(blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description Returns true if the type wraps an empty/default all-0 value\r\n     */\r\n    get isEmpty() {\r\n        return !this.length || isUndefined(this.find((value) => !!value));\r\n    }\r\n    /**\r\n     * @description The length of the value\r\n     */\r\n    get length() {\r\n        // only included here since we ignore inherited docs\r\n        return super.length;\r\n    }\r\n    /**\r\n     * @description Returns the number of bits in the value\r\n     */\r\n    bitLength() {\r\n        return this.length * 8;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        if (other instanceof Uint8Array) {\r\n            return (this.length === other.length) && isUndefined(this.find((value, index) => value !== other[index]));\r\n        }\r\n        return this.eq(U8a.decodeU8a(other));\r\n    }\r\n    /**\r\n     * @description Create a new subarray from the actual buffer. This is needed for compat reasons since a new Uint8Array gets returned here\r\n     * @param begin The position to start at\r\n     * @param end The position to end at\r\n     */\r\n    subarray(begin, end) {\r\n        return Uint8Array.from(this).subarray(begin, end);\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex() {\r\n        return u8aToHex(this);\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.toHex();\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return `&[u8]`;\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        return this.toHex();\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    toU8a(isBare) {\r\n        return Uint8Array.from(this);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/U8a.d.ts","writeByteOrderMark":false,"text":"import { AnyU8a, Codec, IHash } from '../types';\r\n/**\r\n * @name U8a\r\n * @description\r\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\r\n * from other implementations where it will consume the full Uint8Array as passed to it.\r\n * As such it is meant to be subclassed where the wrapper takes care of the\r\n * actual lengths instead of used directly.\r\n * @noInheritDoc\r\n */\r\nexport default class U8a extends Uint8Array implements Codec {\r\n    constructor(value?: AnyU8a);\r\n    private static decodeU8a;\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    readonly hash: IHash;\r\n    /**\r\n     * @description Returns true if the type wraps an empty/default all-0 value\r\n     */\r\n    readonly isEmpty: boolean;\r\n    /**\r\n     * @description The length of the value\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * @description Returns the number of bits in the value\r\n     */\r\n    bitLength(): number;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Create a new subarray from the actual buffer. This is needed for compat reasons since a new Uint8Array gets returned here\r\n     * @param begin The position to start at\r\n     * @param end The position to end at\r\n     */\r\n    subarray(begin: number, end?: number): Uint8Array;\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(): string;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): string;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n}\r\n"}}
