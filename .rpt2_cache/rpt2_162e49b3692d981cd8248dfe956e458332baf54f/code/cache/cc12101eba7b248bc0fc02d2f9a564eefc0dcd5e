{"code":"// Copyright 2017-2019 @polkadot/api-metadata authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { createTypeUnsafe } from '@polkadot/types/codec/createType';\r\nimport { stringCamelCase } from '@polkadot/util';\r\n/**\r\n * Retrieve the parameter types (module constants) from the runtime metadata.\r\n *\r\n * @param metadata - The metadata\r\n */\r\nexport default function fromMetadata(metadata) {\r\n    return metadata.asV7.modules.reduce((result, moduleMetadata) => {\r\n        if (moduleMetadata.constants.isEmpty) {\r\n            return result;\r\n        }\r\n        const { name } = moduleMetadata;\r\n        // For access, we change the index names, i.e. Democracy.EnactmentPeriod -> democracy.enactmentPeriod\r\n        result[stringCamelCase(name.toString())] = moduleMetadata.constants.reduce((newModule, meta) => {\r\n            const codec = createTypeUnsafe(meta.type.toString(), [meta.value]);\r\n            // This is not a perfect idea, however as it stands with number-only constants on the metadata\r\n            // does not have any effect. However, this could become problematic in cases where items are\r\n            // exposed that contain their own metadata. As of now, the compatibility with current, e.g.\r\n            // storage is the driving factor, one consistent way of handling interfaces\r\n            codec.meta = meta;\r\n            newModule[stringCamelCase(meta.name.toString())] = codec;\r\n            return newModule;\r\n        }, {});\r\n        return result;\r\n    }, {});\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/api-metadata/src/consts/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/Metadata/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-metadata/src/consts/fromMetadata/index.d.ts","writeByteOrderMark":false,"text":"import { Constants } from '../types';\r\nimport Metadata from '@polkadot/types/Metadata';\r\n/**\r\n * Retrieve the parameter types (module constants) from the runtime metadata.\r\n *\r\n * @param metadata - The metadata\r\n */\r\nexport default function fromMetadata(metadata: Metadata): Constants;\r\n"}}
