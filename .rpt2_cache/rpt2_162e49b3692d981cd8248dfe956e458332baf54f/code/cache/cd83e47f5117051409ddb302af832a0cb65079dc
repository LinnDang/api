{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { u8aToHex } from '@polkadot/util';\r\nimport createType from '../../codec/createType';\r\nimport Base from '../../codec/Base';\r\nimport ExtrinsicPayloadV1 from './v1/ExtrinsicPayload';\r\nimport ExtrinsicPayloadV2 from './v2/ExtrinsicPayload';\r\nimport ExtrinsicPayloadV3 from './v3/ExtrinsicPayload';\r\nimport { DEFAULT_VERSION } from './constants';\r\n/**\r\n * @name ExtrinsicPayload\r\n * @description\r\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\r\n * on the contents included\r\n */\r\nexport default class ExtrinsicPayload extends Base {\r\n    constructor(value, { version } = {}) {\r\n        super(ExtrinsicPayload.decodeExtrinsicPayload(value, version));\r\n    }\r\n    static decodeExtrinsicPayload(value, version = DEFAULT_VERSION) {\r\n        if (value instanceof ExtrinsicPayload) {\r\n            return value.raw;\r\n        }\r\n        switch (version) {\r\n            case 1: return new ExtrinsicPayloadV1(value);\r\n            case 2: return new ExtrinsicPayloadV2(value);\r\n            case 3: return new ExtrinsicPayloadV3(value);\r\n            default: throw new Error(`Unsupported extrinsic version ${version}`);\r\n        }\r\n    }\r\n    /**\r\n     * @description The block [[Hash]] the signature applies to (mortal/immortal)\r\n     */\r\n    get blockHash() {\r\n        return this.raw.blockHash;\r\n    }\r\n    /**\r\n     * @description The [[ExtrinsicEra]]\r\n     */\r\n    get era() {\r\n        return this.raw.era;\r\n    }\r\n    /**\r\n     * @description The genesis block [[Hash]] the signature applies to\r\n     */\r\n    get genesisHash() {\r\n        // NOTE only v3\r\n        return this.raw.genesisHash || createType('Hash');\r\n    }\r\n    /**\r\n     * @description The [[U8a]] contained in the payload\r\n     */\r\n    get method() {\r\n        return this.raw.method;\r\n    }\r\n    /**\r\n     * @description The [[Index]]\r\n     */\r\n    get nonce() {\r\n        return this.raw.nonce;\r\n    }\r\n    /**\r\n     * @description The [[Balance]]\r\n     */\r\n    get tip() {\r\n        // NOTE from v2\r\n        return this.raw.tip || createType('Compact<Balance>');\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return this.raw.eq(other);\r\n    }\r\n    /**\r\n     * @description Sign the payload with the keypair\r\n     */\r\n    sign(signerPair) {\r\n        const signature = this.raw.sign(signerPair);\r\n        // This is extensible, so we could quite readily extend to send back extra\r\n        // information, such as for instance the payload, i.e. `payload: this.toHex()`\r\n        // For the case here we sign via the extrinsic, we ignore the return, so generally\r\n        // thisis applicable for external signing\r\n        return {\r\n            signature: u8aToHex(signature)\r\n        };\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.toHex();\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        return this.toHex();\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/runtime/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Base.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Compact.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8a.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/v1/ExtrinsicPayload.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/v2/ExtrinsicPayload.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/v3/ExtrinsicPayload.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/ExtrinsicEra.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/primitive/Extrinsic/constants.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/primitive/Extrinsic/ExtrinsicPayload.d.ts","writeByteOrderMark":false,"text":"import { Balance, Hash, Index } from '../../interfaces/runtime';\r\nimport { ExtrinsicPayloadValue, IKeyringPair } from '../../types';\r\nimport Base from '../../codec/Base';\r\nimport Compact from '../../codec/Compact';\r\nimport U8a from '../../codec/U8a';\r\nimport ExtrinsicPayloadV1 from './v1/ExtrinsicPayload';\r\nimport ExtrinsicPayloadV2 from './v2/ExtrinsicPayload';\r\nimport ExtrinsicPayloadV3 from './v3/ExtrinsicPayload';\r\nimport ExtrinsicEra from './ExtrinsicEra';\r\ninterface ExtrinsicPayloadOptions {\r\n    version?: number;\r\n}\r\n/**\r\n * @name ExtrinsicPayload\r\n * @description\r\n * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based\r\n * on the contents included\r\n */\r\nexport default class ExtrinsicPayload extends Base<ExtrinsicPayloadV1 | ExtrinsicPayloadV2 | ExtrinsicPayloadV3> {\r\n    constructor(value: Partial<ExtrinsicPayloadValue> | Uint8Array | string | undefined, { version }?: ExtrinsicPayloadOptions);\r\n    static decodeExtrinsicPayload(value: ExtrinsicPayload | ExtrinsicPayloadValue | Uint8Array | string | undefined, version?: number): ExtrinsicPayloadV1 | ExtrinsicPayloadV2 | ExtrinsicPayloadV3;\r\n    /**\r\n     * @description The block [[Hash]] the signature applies to (mortal/immortal)\r\n     */\r\n    readonly blockHash: Hash;\r\n    /**\r\n     * @description The [[ExtrinsicEra]]\r\n     */\r\n    readonly era: ExtrinsicEra;\r\n    /**\r\n     * @description The genesis block [[Hash]] the signature applies to\r\n     */\r\n    readonly genesisHash: Hash;\r\n    /**\r\n     * @description The [[U8a]] contained in the payload\r\n     */\r\n    readonly method: U8a;\r\n    /**\r\n     * @description The [[Index]]\r\n     */\r\n    readonly nonce: Compact<Index>;\r\n    /**\r\n     * @description The [[Balance]]\r\n     */\r\n    readonly tip: Compact<Balance>;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Sign the payload with the keypair\r\n     */\r\n    sign(signerPair: IKeyringPair): {\r\n        signature: string;\r\n    };\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): any;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n}\r\nexport {};\r\n"}}
