{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { of } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { isU8a } from '@polkadot/util';\r\nimport { decodeAddress } from '@polkadot/util-crypto';\r\nimport { createType } from '@polkadot/types';\r\nimport { idToIndex } from './idToIndex';\r\nimport { indexToId } from './indexToId';\r\nimport { drr } from '../util/drr';\r\n/**\r\n * @name idAndIndex\r\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\r\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\r\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\r\n * });\r\n * ```\r\n */\r\nexport function idAndIndex(api) {\r\n    return (address) => {\r\n        try {\r\n            // yes, this can fail, don't care too much, catch will catch it\r\n            const decoded = isU8a(address)\r\n                ? address\r\n                : decodeAddress((address || '').toString());\r\n            if (decoded.length === 32) {\r\n                const accountId = createType('AccountId', decoded);\r\n                return idToIndex(api)(accountId).pipe(startWith(undefined), map((accountIndex) => [accountId, accountIndex]), drr());\r\n            }\r\n            const accountIndex = createType('AccountIndex', decoded);\r\n            return indexToId(api)(accountIndex).pipe(startWith(undefined), map((accountId) => [accountId, accountIndex]), drr());\r\n        }\r\n        catch (error) {\r\n            return of([undefined, undefined]).pipe(drr());\r\n        }\r\n    };\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/accounts/idToIndex.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/accounts/indexToId.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/accounts/idAndIndex.d.ts","writeByteOrderMark":false,"text":"import { AccountId, AccountIndex, Address } from '@polkadot/types/interfaces';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiInterfaceRx } from '@polkadot/api/types';\r\nexport declare type AccountIdAndIndex = [AccountId?, AccountIndex?];\r\n/**\r\n * @name idAndIndex\r\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\r\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\r\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\r\n * });\r\n * ```\r\n */\r\nexport declare function idAndIndex(api: ApiInterfaceRx): (address?: Address | AccountId | AccountIndex | string | null) => Observable<AccountIdAndIndex>;\r\n"}}
