{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { u8aConcat, u8aToHex } from '@polkadot/util';\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\nimport Compact from './Compact';\r\nimport U8a from './U8a';\r\nimport { compareArray } from './utils';\r\n/**\r\n * @name AbstractArray\r\n * @description\r\n * This manages codec arrays. It is an extension to Array, providing\r\n * specific encoding/decoding on top of the base type.\r\n * @noInheritDoc\r\n */\r\nexport default class AbstractArray extends Array {\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return this.reduce((total, raw) => {\r\n            return total + raw.encodedLength;\r\n        }, Compact.encodeU8a(this.length).length);\r\n    }\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    get hash() {\r\n        return new U8a(blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description Checks if the value is an empty value\r\n     */\r\n    get isEmpty() {\r\n        return this.length === 0;\r\n    }\r\n    /**\r\n     * @description The length of the value\r\n     */\r\n    get length() {\r\n        // only included here since we ignore inherited docs\r\n        return super.length;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return compareArray(this, other);\r\n    }\r\n    /**\r\n     * @description Converts the Object to an standard JavaScript Array\r\n     */\r\n    toArray() {\r\n        return Array.from(this);\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex() {\r\n        return u8aToHex(this.toU8a());\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.map((entry) => entry.toJSON());\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        // Overwrite the default toString representation of Array.\r\n        const data = this.map((entry) => entry.toString());\r\n        return `[${data.join(', ')}]`;\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare) {\r\n        const encoded = this.map((entry) => entry.toU8a(isBare));\r\n        return isBare\r\n            ? u8aConcat(...encoded)\r\n            : u8aConcat(Compact.encodeU8a(this.length), ...encoded);\r\n    }\r\n    // Below are methods that we override. When we do a `new Vec(...).map()`,\r\n    // we want it to return an Array. We only override the methods that return a\r\n    // new instance.\r\n    /**\r\n     * @description Filters the array with the callback\r\n     * @param callbackfn The filter function\r\n     * @param thisArg The `this` object to apply the result to\r\n     */\r\n    filter(callbackfn, thisArg) {\r\n        return this.toArray().filter(callbackfn, thisArg);\r\n    }\r\n    /**\r\n     * @description Maps the array with the callback\r\n     * @param callbackfn The mapping function\r\n     * @param thisArg The `this` onject to apply the result to\r\n     */\r\n    map(callbackfn, thisArg) {\r\n        return this.toArray().map(callbackfn, thisArg);\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/Compact.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8a.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/utils/index.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/AbstractArray.d.ts","writeByteOrderMark":false,"text":"import { AnyJsonArray, Codec, IHash } from '../types';\r\n/**\r\n * @name AbstractArray\r\n * @description\r\n * This manages codec arrays. It is an extension to Array, providing\r\n * specific encoding/decoding on top of the base type.\r\n * @noInheritDoc\r\n */\r\nexport default abstract class AbstractArray<T extends Codec> extends Array<T> implements Codec {\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    readonly hash: IHash;\r\n    /**\r\n     * @description Checks if the value is an empty value\r\n     */\r\n    readonly isEmpty: boolean;\r\n    /**\r\n     * @description The length of the value\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Converts the Object to an standard JavaScript Array\r\n     */\r\n    toArray(): T[];\r\n    /**\r\n     * @description Returns a hex string representation of the value\r\n     */\r\n    toHex(): string;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): AnyJsonArray;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    abstract toRawType(): string;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n    /**\r\n     * @description Filters the array with the callback\r\n     * @param callbackfn The filter function\r\n     * @param thisArg The `this` object to apply the result to\r\n     */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => any, thisArg?: any): T[];\r\n    /**\r\n     * @description Maps the array with the callback\r\n     * @param callbackfn The mapping function\r\n     * @param thisArg The `this` onject to apply the result to\r\n     */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n}\r\n"}}
