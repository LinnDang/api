{"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { createType, Struct, u8 } from '@polkadot/types';\r\nexport default class Payload extends Struct.with({\r\n    address: 'Address',\r\n    blockHash: 'Hash',\r\n    blockNumber: 'BlockNumber',\r\n    era: 'ExtrinsicEra',\r\n    genesisHash: 'Hash',\r\n    method: 'Call',\r\n    nonce: 'Compact<Index>',\r\n    tip: 'Compact<Balance>',\r\n    version: u8\r\n}) {\r\n    /**\r\n     * @description Returns this as a SignerPayloadType. This works since the Struct.with injects all the getters automatically (just ensure the 2 definitiona are matching)\r\n     */\r\n    get self() {\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Creates an representation of the structure as an ISignerPayload JSON\r\n     */\r\n    toPayload() {\r\n        const { address, blockHash, blockNumber, era, genesisHash, method, nonce, tip, version } = this.self;\r\n        return {\r\n            address: address.toString(),\r\n            blockHash: blockHash.toHex(),\r\n            blockNumber: blockNumber.toHex(),\r\n            era: era.toHex(),\r\n            genesisHash: genesisHash.toHex(),\r\n            method: method.toHex(),\r\n            nonce: nonce.toHex(),\r\n            tip: tip.toHex(),\r\n            version: version.toNumber()\r\n        };\r\n    }\r\n    /**\r\n     * @description Creates a representation of the payload in raw Exrinsic form\r\n     */\r\n    toRaw() {\r\n        const payload = this.toPayload();\r\n        const data = createType('ExtrinsicPayload', payload, { version: payload.version }).toHex();\r\n        return {\r\n            address: payload.address,\r\n            data,\r\n            type: 'payload'\r\n        };\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/index.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api/src/SignerPayload.d.ts","writeByteOrderMark":false,"text":"import { Address, Balance, BlockNumber, Call, ExtrinsicEra, Hash, Index } from '@polkadot/types/interfaces';\r\nimport { SignerPayload, SignerPayloadRaw } from './types';\r\nimport { Compact, Struct, u8 } from '@polkadot/types';\r\nexport interface SignerPayloadType {\r\n    address: Address;\r\n    blockHash: Hash;\r\n    blockNumber: BlockNumber;\r\n    era: ExtrinsicEra;\r\n    genesisHash: Hash;\r\n    method: Call;\r\n    nonce: Compact<Index>;\r\n    tip: Compact<Balance>;\r\n    version: u8;\r\n}\r\ndeclare const Payload_base: import(\"../../types/src/types\").Constructor<Struct<{\r\n    address: \"Address\";\r\n    blockHash: \"Hash\";\r\n    blockNumber: \"BlockNumber\";\r\n    era: \"ExtrinsicEra\";\r\n    genesisHash: \"Hash\";\r\n    method: \"Call\";\r\n    nonce: \"Compact<Index>\";\r\n    tip: \"Compact<Balance>\";\r\n    version: typeof u8;\r\n}, {\r\n    address: import(\"../../types/src/types\").Codec;\r\n    blockHash: import(\"../../types/src/types\").Codec;\r\n    blockNumber: import(\"../../types/src/types\").Codec;\r\n    era: import(\"../../types/src/types\").Codec;\r\n    genesisHash: import(\"../../types/src/types\").Codec;\r\n    method: import(\"../../types/src/types\").Codec;\r\n    nonce: import(\"../../types/src/types\").Codec;\r\n    tip: import(\"../../types/src/types\").Codec;\r\n    version: import(\"../../types/src/types\").Codec;\r\n}, {\r\n    address: any;\r\n    blockHash: any;\r\n    blockNumber: any;\r\n    era: any;\r\n    genesisHash: any;\r\n    method: any;\r\n    nonce: any;\r\n    tip: any;\r\n    version: any;\r\n}, {\r\n    address: string;\r\n    blockHash: string;\r\n    blockNumber: string;\r\n    era: string;\r\n    genesisHash: string;\r\n    method: string;\r\n    nonce: string;\r\n    tip: string;\r\n    version: string;\r\n}>>;\r\nexport default class Payload extends Payload_base {\r\n    /**\r\n     * @description Returns this as a SignerPayloadType. This works since the Struct.with injects all the getters automatically (just ensure the 2 definitiona are matching)\r\n     */\r\n    readonly self: SignerPayloadType;\r\n    /**\r\n     * @description Creates an representation of the structure as an ISignerPayload JSON\r\n     */\r\n    toPayload(): SignerPayload;\r\n    /**\r\n     * @description Creates a representation of the payload in raw Exrinsic form\r\n     */\r\n    toRaw(): SignerPayloadRaw;\r\n}\r\nexport {};\r\n"}}
