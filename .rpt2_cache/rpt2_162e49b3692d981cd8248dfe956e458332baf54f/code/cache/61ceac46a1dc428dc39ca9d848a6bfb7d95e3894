{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isFunction, isString, isUndefined } from '@polkadot/util';\r\nimport { createClass } from './createType';\r\nexport class TypeRegistry {\r\n    constructor() {\r\n        this._classes = new Map();\r\n        this._definitions = new Map();\r\n    }\r\n    // eslint-disable-next-line no-dupe-class-members\r\n    register(arg1, arg2) {\r\n        if (isString(arg1)) {\r\n            const name = arg1;\r\n            const type = arg2;\r\n            this._classes.set(name, type);\r\n        }\r\n        else if (isFunction(arg1)) {\r\n            const name = arg1.name;\r\n            const type = arg1;\r\n            this._classes.set(name, type);\r\n        }\r\n        else {\r\n            this.registerObject(arg1);\r\n        }\r\n    }\r\n    registerObject(obj) {\r\n        Object.entries(obj).forEach(([name, type]) => {\r\n            if (isFunction(type)) {\r\n                // This _looks_ a bit funny, but `typeof Clazz === 'function'\r\n                this._classes.set(name, type);\r\n            }\r\n            else {\r\n                const def = isString(type)\r\n                    ? type\r\n                    : JSON.stringify(type);\r\n                if (this._classes.has(name)) {\r\n                    console.warn(`The type '${name}' is already existing as a class, re-registering definition`);\r\n                    this._classes.delete(name);\r\n                }\r\n                this._definitions.set(name, def);\r\n            }\r\n        });\r\n    }\r\n    get(name) {\r\n        let Type = this._classes.get(name);\r\n        // we have not already created the type, attempt it\r\n        if (!Type) {\r\n            const definition = this._definitions.get(name);\r\n            // we have a definition, so create the class now (lazily)\r\n            if (definition) {\r\n                const BaseType = createClass(definition);\r\n                // NOTE If we didn't extend here, we would have strange artifacts. An example is\r\n                // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128\r\n                Type = class extends BaseType {\r\n                };\r\n                this._classes.set(name, Type);\r\n            }\r\n        }\r\n        return Type;\r\n    }\r\n    getDefinition(name) {\r\n        return this._definitions.get(name);\r\n    }\r\n    getOrThrow(name, msg) {\r\n        const type = this.get(name);\r\n        if (isUndefined(type)) {\r\n            throw new Error(msg || `type ${name} not found`);\r\n        }\r\n        return type;\r\n    }\r\n    hasType(name) {\r\n        return this._classes.has(name) || this._definitions.has(name);\r\n    }\r\n}\r\nTypeRegistry.defaultRegistry = new TypeRegistry();\r\nexport default function getDefaultRegistry() {\r\n    return TypeRegistry.defaultRegistry;\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/createType.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/typeRegistry.d.ts","writeByteOrderMark":false,"text":"import { Codec, Constructor, RegistryTypes } from '../types';\r\nexport declare class TypeRegistry {\r\n    static readonly defaultRegistry: TypeRegistry;\r\n    private _classes;\r\n    private _definitions;\r\n    register(type: Constructor | RegistryTypes): void;\r\n    register(name: string, type: Constructor): void;\r\n    private registerObject;\r\n    get<T extends Codec = Codec>(name: string): Constructor<T> | undefined;\r\n    getDefinition(name: string): string | undefined;\r\n    getOrThrow<T extends Codec = Codec>(name: string, msg?: string): Constructor<T>;\r\n    hasType(name: string): boolean;\r\n}\r\nexport default function getDefaultRegistry(): TypeRegistry;\r\n"}}
