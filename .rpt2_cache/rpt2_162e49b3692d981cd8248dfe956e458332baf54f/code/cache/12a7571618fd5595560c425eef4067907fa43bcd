{"code":"// Copyright 2017-2019 @polkadot/api-derive authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { HeaderExtended } from '../type';\r\nimport { drr } from '../util/drr';\r\n/**\r\n * @name subscribeNewHead\r\n * @returns An array containing the block header and the block author\r\n * @description An observable of the current block header and it's author\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.chain.subscribeNewHead(({ author, blockNumber }) => {\r\n *   console.log(`block #${blockNumber} was authored by ${author}`);\r\n * });\r\n * ```\r\n */\r\nexport function subscribeNewHead(api) {\r\n    return () => api.rpc.chain.subscribeNewHead()\r\n        .pipe(filter((header) => !!header && !!header.number), switchMap((header) => combineLatest([\r\n        of(header),\r\n        // theoretically we could combine at the first call with session.validators(), however\r\n        // we make 100% sure we actually get the validators at a specific block so when these\r\n        // change at an era boundary, we have the previous values to ensure our indexes are correct\r\n        api.query.session\r\n            ? api.query.session.validators.at(header.hash)\r\n            : of([])\r\n    ])), map(([header, validators]) => new HeaderExtended(header, validators)), drr());\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/interfaces/index.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/rxjs/operators/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/type/index.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api-derive/src/util/drr.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api-derive/src/chain/subscribeNewHead.d.ts","writeByteOrderMark":false,"text":"import { ApiInterfaceRx } from '@polkadot/api/types';\r\nimport { AccountId, Header } from '@polkadot/types/interfaces';\r\nimport { Observable } from 'rxjs';\r\nimport { HeaderExtended } from '../type';\r\nexport declare type HeaderAndValidators = [Header, AccountId[]];\r\n/**\r\n * @name subscribeNewHead\r\n * @returns An array containing the block header and the block author\r\n * @description An observable of the current block header and it's author\r\n * @example\r\n * <BR>\r\n *\r\n * ```javascript\r\n * api.derive.chain.subscribeNewHead(({ author, blockNumber }) => {\r\n *   console.log(`block #${blockNumber} was authored by ${author}`);\r\n * });\r\n * ```\r\n */\r\nexport declare function subscribeNewHead(api: ApiInterfaceRx): () => Observable<HeaderExtended>;\r\n"}}
