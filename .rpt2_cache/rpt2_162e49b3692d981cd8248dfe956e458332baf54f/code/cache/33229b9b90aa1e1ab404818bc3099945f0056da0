{"code":"// Copyright 2017-2019 @polkadot/types authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { blake2AsU8a } from '@polkadot/util-crypto';\r\nimport U8a from './U8a';\r\n/**\r\n * @name Base\r\n * @description A type extends the Base class, when it holds a value\r\n */\r\nexport default class Base {\r\n    constructor(value) {\r\n        this.raw = value;\r\n    }\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    get encodedLength() {\r\n        return this.toU8a().length;\r\n    }\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    get hash() {\r\n        return new U8a(blake2AsU8a(this.toU8a(), 256));\r\n    }\r\n    /**\r\n     * @description Checks if the value is an empty value\r\n     */\r\n    get isEmpty() {\r\n        return this.raw.isEmpty;\r\n    }\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other) {\r\n        return this.raw.eq(other);\r\n    }\r\n    /**\r\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\r\n     */\r\n    toHex(isLe) {\r\n        return this.raw.toHex(isLe);\r\n    }\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON() {\r\n        return this.raw.toJSON();\r\n    }\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString() {\r\n        return this.raw.toString();\r\n    }\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare) {\r\n        return this.raw.toU8a(isBare);\r\n    }\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType() {\r\n        return 'Base';\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util-crypto/index.d.ts","/Users/jacogreeff/Projects/polkadot/api/packages/types/src/codec/U8a.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/types/src/codec/Base.d.ts","writeByteOrderMark":false,"text":"import { AnyJson, Codec, IHash } from '../types';\r\n/**\r\n * @name Base\r\n * @description A type extends the Base class, when it holds a value\r\n */\r\nexport default abstract class Base<T extends Codec> implements Codec {\r\n    protected raw: T;\r\n    constructor(value?: any);\r\n    /**\r\n     * @description The length of the value when encoded as a Uint8Array\r\n     */\r\n    readonly encodedLength: number;\r\n    /**\r\n     * @description returns a hash of the contents\r\n     */\r\n    readonly hash: IHash;\r\n    /**\r\n     * @description Checks if the value is an empty value\r\n     */\r\n    readonly isEmpty: boolean;\r\n    /**\r\n     * @description Compares the value of the input to see if there is a match\r\n     */\r\n    eq(other?: any): boolean;\r\n    /**\r\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\r\n     */\r\n    toHex(isLe?: boolean): string;\r\n    /**\r\n     * @description Converts the Object to JSON, typically used for RPC transfers\r\n     */\r\n    toJSON(): AnyJson;\r\n    /**\r\n     * @description Returns the string representation of the value\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\r\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\r\n     */\r\n    toU8a(isBare?: boolean): Uint8Array;\r\n    /**\r\n     * @description Returns the base runtime type name for this instance\r\n     */\r\n    toRawType(): string;\r\n}\r\n"}}
