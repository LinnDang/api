{"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\r\n// This software may be modified and distributed under the terms\r\n// of the Apache-2.0 license. See the LICENSE file for details.\r\nimport { isFunction } from '@polkadot/util';\r\nexport default class Combinator {\r\n    constructor(fns, callback) {\r\n        this._allHasFired = false;\r\n        this._fired = [];\r\n        this._fns = [];\r\n        this._isActive = true;\r\n        this._results = [];\r\n        this._subscriptions = [];\r\n        this._callback = callback;\r\n        this._subscriptions = fns.map(async (input, index) => {\r\n            const [fn, ...args] = Array.isArray(input)\r\n                ? input\r\n                : [input];\r\n            this._fired.push(false);\r\n            this._fns.push(fn);\r\n            // @ts-ignore Not quite 100% how to have a variable number at the front here\r\n            return fn(...args, this.createCallback(index));\r\n        });\r\n    }\r\n    allHasFired() {\r\n        if (!this._allHasFired) {\r\n            this._allHasFired = this._fired.filter((hasFired) => !hasFired).length === 0;\r\n        }\r\n        return this._allHasFired;\r\n    }\r\n    createCallback(index) {\r\n        return (value) => {\r\n            this._fired[index] = true;\r\n            this._results[index] = value;\r\n            this.triggerUpdate();\r\n        };\r\n    }\r\n    triggerUpdate() {\r\n        if (!this._isActive || !isFunction(this._callback) || !this.allHasFired()) {\r\n            return;\r\n        }\r\n        try {\r\n            this._callback(this._results);\r\n        }\r\n        catch (error) {\r\n            // swallow, we don't want the handler to trip us up\r\n        }\r\n    }\r\n    unsubscribe() {\r\n        if (!this._isActive) {\r\n            return;\r\n        }\r\n        this._isActive = false;\r\n        this._subscriptions.forEach(async (subscription) => {\r\n            try {\r\n                const unsubscribe = await subscription;\r\n                if (isFunction(unsubscribe)) {\r\n                    unsubscribe();\r\n                }\r\n            }\r\n            catch (error) {\r\n                // ignore\r\n            }\r\n        });\r\n    }\r\n}\r\n","references":["/Users/jacogreeff/Projects/polkadot/api/packages/types/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/packages/api/src/types.ts","/Users/jacogreeff/Projects/polkadot/api/node_modules/@polkadot/util/index.d.ts"],"dts":{"name":"/Users/jacogreeff/Projects/polkadot/api/api/src/promise/Combinator.d.ts","writeByteOrderMark":false,"text":"import { Callback } from '@polkadot/types/types';\r\nimport { UnsubscribePromise } from '../types';\r\nexport declare type CombinatorCallback = Callback<any[]>;\r\nexport interface CombinatorFunction {\r\n    (cb: Callback<any>): UnsubscribePromise;\r\n}\r\nexport default class Combinator {\r\n    protected _allHasFired: boolean;\r\n    protected _callback: CombinatorCallback;\r\n    protected _fired: boolean[];\r\n    protected _fns: CombinatorFunction[];\r\n    protected _isActive: boolean;\r\n    protected _results: any[];\r\n    protected _subscriptions: UnsubscribePromise[];\r\n    constructor(fns: (CombinatorFunction | [CombinatorFunction, ...any[]])[], callback: CombinatorCallback);\r\n    protected allHasFired(): boolean;\r\n    protected createCallback(index: number): (value: any) => void;\r\n    protected triggerUpdate(): void;\r\n    unsubscribe(): void;\r\n}\r\n"}}
